"use strict";(self.webpackChunkrefract_docs=self.webpackChunkrefract_docs||[]).push([[346],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var a=t(6540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}},9743:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"api/useRefraction","title":"useRefraction","description":"The useRefraction hook creates reactive state variables that automatically trigger UI updates when their values change. It\'s the primary way to manage state in Refract components, providing a simple yet powerful interface for reactive programming.","source":"@site/docs/api/useRefraction.md","sourceDirName":"api","slug":"/api/useRefraction","permalink":"/docs/api/useRefraction","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/api/useRefraction.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"createOptic","permalink":"/docs/api/createOptic"},"next":{"title":"useEffect","permalink":"/docs/api/useEffect"}}');var s=t(4848),i=t(8453);const r={},l="useRefraction",o={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"<code>initialValue</code>",id:"initialvalue",level:3},{value:"Return Value",id:"return-value",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Primitive Values",id:"primitive-values",level:3},{value:"Objects and Arrays",id:"objects-and-arrays",level:3},{value:"Update Methods",id:"update-methods",level:2},{value:"Direct Assignment",id:"direct-assignment",level:3},{value:"Functional Updates",id:"functional-updates",level:3},{value:"Object Property Updates",id:"object-property-updates",level:3},{value:"Global Refractions",id:"global-refractions",level:2},{value:"Creating Global State",id:"creating-global-state",level:3},{value:"Global State Management",id:"global-state-management",level:3},{value:"Derived State",id:"derived-state",level:2},{value:"useDerived Hook",id:"usederived-hook",level:3},{value:"Complex Derived State",id:"complex-derived-state",level:3},{value:"Advanced Patterns",id:"advanced-patterns",level:2},{value:"Async State Management",id:"async-state-management",level:3},{value:"State Validation",id:"state-validation",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Avoiding Unnecessary Updates",id:"avoiding-unnecessary-updates",level:3},{value:"Batching Updates",id:"batching-updates",level:3},{value:"Testing",id:"testing",level:2},{value:"Testing Refractions",id:"testing-refractions",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Initialize with Appropriate Types",id:"1-initialize-with-appropriate-types",level:3},{value:"2. Use Descriptive Names",id:"2-use-descriptive-names",level:3},{value:"3. Keep State Focused",id:"3-keep-state-focused",level:3},{value:"Related APIs",id:"related-apis",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"userefraction",children:"useRefraction"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"useRefraction"})," hook creates reactive state variables that automatically trigger UI updates when their values change. It's the primary way to manage state in Refract components, providing a simple yet powerful interface for reactive programming."]}),"\n",(0,s.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const refraction = lens.useRefraction(initialValue)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(n.h3,{id:"initialvalue",children:(0,s.jsx)(n.code,{children:"initialValue"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type:"})," ",(0,s.jsx)(n.code,{children:"T"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Required:"})," Yes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description:"})," The initial value for the reactive state"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,s.jsxs)(n.p,{children:["Returns a ",(0,s.jsx)(n.code,{children:"Refraction<T>"})," object with the following interface:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface Refraction<T> {\n  value: T;                                    // Current value\n  set: (value: T | ((prev: T) => T)) => void; // Update function\n  subscribe: (callback: (value: T) => void) => () => void; // Subscribe to changes\n  update: (key: keyof T, value: any) => void; // Update object property (if T is object)\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsx)(n.h3,{id:"primitive-values",children:"Primitive Values"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const Counter = createComponent(({ lens }) => {\n  const count = lens.useRefraction(0);\n  const name = lens.useRefraction('');\n  const isVisible = lens.useRefraction(true);\n  \n  return (\n    <div>\n      <p>Count: {count.value}</p>\n      <p>Name: {name.value}</p>\n      <p>Visible: {isVisible.value ? 'Yes' : 'No'}</p>\n      \n      <button onClick={() => count.set(count.value + 1)}>\n        Increment\n      </button>\n      <input \n        value={name.value}\n        onChange={(e) => name.set(e.target.value)}\n        placeholder=\"Enter name\"\n      />\n      <button onClick={() => isVisible.set(!isVisible.value)}>\n        Toggle Visibility\n      </button>\n    </div>\n  );\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"objects-and-arrays",children:"Objects and Arrays"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const UserForm = createComponent(({ lens }) => {\n  const user = lens.useRefraction({\n    name: '',\n    email: '',\n    age: 0\n  });\n  \n  const hobbies = lens.useRefraction(['reading', 'coding']);\n  \n  const updateUser = (field, value) => {\n    user.set(prev => ({ ...prev, [field]: value }));\n  };\n  \n  const addHobby = (hobby) => {\n    hobbies.set(prev => [...prev, hobby]);\n  };\n  \n  return (\n    <form>\n      <input\n        value={user.value.name}\n        onChange={(e) => updateUser('name', e.target.value)}\n        placeholder=\"Name\"\n      />\n      <input\n        value={user.value.email}\n        onChange={(e) => updateUser('email', e.target.value)}\n        placeholder=\"Email\"\n      />\n      <input\n        type=\"number\"\n        value={user.value.age}\n        onChange={(e) => updateUser('age', parseInt(e.target.value))}\n        placeholder=\"Age\"\n      />\n      \n      <div>\n        <h3>Hobbies:</h3>\n        {hobbies.value.map((hobby, index) => (\n          <span key={index}>{hobby}, </span>\n        ))}\n        <button type=\"button\" onClick={() => addHobby('swimming')}>\n          Add Swimming\n        </button>\n      </div>\n    </form>\n  );\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"update-methods",children:"Update Methods"}),"\n",(0,s.jsx)(n.h3,{id:"direct-assignment",children:"Direct Assignment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const Example = createComponent(({ lens }) => {\n  const message = lens.useRefraction('Hello');\n  \n  // Direct value assignment\n  const updateMessage = () => {\n    message.set('Updated message');\n  };\n  \n  return (\n    <div>\n      <p>{message.value}</p>\n      <button onClick={updateMessage}>Update</button>\n    </div>\n  );\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"functional-updates",children:"Functional Updates"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const FunctionalUpdate = createComponent(({ lens }) => {\n  const count = lens.useRefraction(0);\n  const items = lens.useRefraction([]);\n  \n  // Functional update based on previous value\n  const increment = () => {\n    count.set(prev => prev + 1);\n  };\n  \n  const addItem = (item) => {\n    items.set(prev => [...prev, item]);\n  };\n  \n  const removeItem = (index) => {\n    items.set(prev => prev.filter((_, i) => i !== index));\n  };\n  \n  return (\n    <div>\n      <p>Count: {count.value}</p>\n      <button onClick={increment}>Increment</button>\n      \n      <ul>\n        {items.value.map((item, index) => (\n          <li key={index}>\n            {item}\n            <button onClick={() => removeItem(index)}>Remove</button>\n          </li>\n        ))}\n      </ul>\n      <button onClick={() => addItem(`Item ${items.value.length + 1}`)}>\n        Add Item\n      </button>\n    </div>\n  );\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"object-property-updates",children:"Object Property Updates"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const ObjectUpdate = createComponent(({ lens }) => {\n  const settings = lens.useRefraction({\n    theme: 'light',\n    notifications: true,\n    language: 'en'\n  });\n  \n  // Update specific property (if available)\n  const toggleTheme = () => {\n    settings.update('theme', settings.value.theme === 'light' ? 'dark' : 'light');\n  };\n  \n  // Alternative: full object update\n  const toggleNotifications = () => {\n    settings.set(prev => ({\n      ...prev,\n      notifications: !prev.notifications\n    }));\n  };\n  \n  return (\n    <div>\n      <p>Theme: {settings.value.theme}</p>\n      <p>Notifications: {settings.value.notifications ? 'On' : 'Off'}</p>\n      \n      <button onClick={toggleTheme}>Toggle Theme</button>\n      <button onClick={toggleNotifications}>Toggle Notifications</button>\n    </div>\n  );\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"global-refractions",children:"Global Refractions"}),"\n",(0,s.jsx)(n.h3,{id:"creating-global-state",children:"Creating Global State"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// store/globalState.js\nimport { createRefraction } from 'refract';\n\nexport const theme = createRefraction('light');\nexport const user = createRefraction(null);\nexport const notifications = createRefraction([]);\n\n// components/ThemeToggle.js\nimport { createComponent } from 'refract';\nimport { theme } from '../store/globalState';\n\nconst ThemeToggle = createComponent(({ lens }) => {\n  // Access global refraction directly\n  const toggleTheme = () => {\n    theme.set(theme.value === 'light' ? 'dark' : 'light');\n  };\n  \n  return (\n    <button onClick={toggleTheme}>\n      Current theme: {theme.value}\n    </button>\n  );\n});\n\n// components/App.js\nconst App = createComponent(({ lens }) => {\n  // Subscribe to global theme changes\n  const currentTheme = lens.useRefraction(theme.value);\n  \n  lens.useEffect(() => {\n    const unsubscribe = theme.subscribe((newTheme) => {\n      currentTheme.set(newTheme);\n    });\n    \n    return unsubscribe;\n  }, []);\n  \n  return (\n    <div className={`app theme-${currentTheme.value}`}>\n      <ThemeToggle />\n    </div>\n  );\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"global-state-management",children:"Global State Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// store/userStore.js\nimport { createRefraction } from 'refract';\n\nexport const userStore = {\n  user: createRefraction(null),\n  isAuthenticated: createRefraction(false),\n  \n  login: async (credentials) => {\n    try {\n      const user = await authAPI.login(credentials);\n      userStore.user.set(user);\n      userStore.isAuthenticated.set(true);\n    } catch (error) {\n      throw error;\n    }\n  },\n  \n  logout: () => {\n    userStore.user.set(null);\n    userStore.isAuthenticated.set(false);\n  }\n};\n\n// components/LoginForm.js\nconst LoginForm = createComponent(({ lens }) => {\n  const email = lens.useRefraction('');\n  const password = lens.useRefraction('');\n  const isLoading = lens.useRefraction(false);\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    isLoading.set(true);\n    \n    try {\n      await userStore.login({\n        email: email.value,\n        password: password.value\n      });\n    } catch (error) {\n      alert('Login failed: ' + error.message);\n    } finally {\n      isLoading.set(false);\n    }\n  };\n  \n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"email\"\n        value={email.value}\n        onChange={(e) => email.set(e.target.value)}\n        placeholder=\"Email\"\n        disabled={isLoading.value}\n      />\n      <input\n        type=\"password\"\n        value={password.value}\n        onChange={(e) => password.set(e.target.value)}\n        placeholder=\"Password\"\n        disabled={isLoading.value}\n      />\n      <button type=\"submit\" disabled={isLoading.value}>\n        {isLoading.value ? 'Logging in...' : 'Login'}\n      </button>\n    </form>\n  );\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"derived-state",children:"Derived State"}),"\n",(0,s.jsx)(n.h3,{id:"usederived-hook",children:"useDerived Hook"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const ShoppingCart = createComponent(({ lens }) => {\n  const items = lens.useRefraction([\n    { id: 1, name: 'Apple', price: 1.50, quantity: 2 },\n    { id: 2, name: 'Banana', price: 0.75, quantity: 3 }\n  ]);\n  \n  // Derived state automatically updates when items change\n  const total = lens.useDerived(() => {\n    return items.value.reduce((sum, item) => \n      sum + (item.price * item.quantity), 0\n    );\n  }, [items.value]);\n  \n  const itemCount = lens.useDerived(() => {\n    return items.value.reduce((count, item) => count + item.quantity, 0);\n  }, [items.value]);\n  \n  const updateQuantity = (id, newQuantity) => {\n    items.set(prev => prev.map(item => \n      item.id === id ? { ...item, quantity: newQuantity } : item\n    ));\n  };\n  \n  return (\n    <div>\n      <h2>Shopping Cart ({itemCount.value} items)</h2>\n      {items.value.map(item => (\n        <div key={item.id}>\n          <span>{item.name} - ${item.price}</span>\n          <input\n            type=\"number\"\n            value={item.quantity}\n            onChange={(e) => updateQuantity(item.id, parseInt(e.target.value))}\n            min=\"0\"\n          />\n        </div>\n      ))}\n      <h3>Total: ${total.value.toFixed(2)}</h3>\n    </div>\n  );\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"complex-derived-state",children:"Complex Derived State"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const DataAnalytics = createComponent(({ lens }) => {\n  const rawData = lens.useRefraction([]);\n  const filters = lens.useRefraction({\n    category: 'all',\n    dateRange: 'week',\n    minValue: 0\n  });\n  \n  // Multi-step derived computation\n  const filteredData = lens.useDerived(() => {\n    return rawData.value.filter(item => {\n      if (filters.value.category !== 'all' && item.category !== filters.value.category) {\n        return false;\n      }\n      if (item.value < filters.value.minValue) {\n        return false;\n      }\n      // Add date range filtering logic\n      return true;\n    });\n  }, [rawData.value, filters.value]);\n  \n  const statistics = lens.useDerived(() => {\n    const data = filteredData.value;\n    return {\n      count: data.length,\n      average: data.reduce((sum, item) => sum + item.value, 0) / data.length || 0,\n      max: Math.max(...data.map(item => item.value)) || 0,\n      min: Math.min(...data.map(item => item.value)) || 0\n    };\n  }, [filteredData.value]);\n  \n  return (\n    <div>\n      <div>\n        <select \n          value={filters.value.category}\n          onChange={(e) => filters.set(prev => ({ ...prev, category: e.target.value }))}\n        >\n          <option value=\"all\">All Categories</option>\n          <option value=\"sales\">Sales</option>\n          <option value=\"marketing\">Marketing</option>\n        </select>\n      </div>\n      \n      <div>\n        <h3>Statistics</h3>\n        <p>Count: {statistics.value.count}</p>\n        <p>Average: {statistics.value.average.toFixed(2)}</p>\n        <p>Max: {statistics.value.max}</p>\n        <p>Min: {statistics.value.min}</p>\n      </div>\n    </div>\n  );\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-patterns",children:"Advanced Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"async-state-management",children:"Async State Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const AsyncDataComponent = createComponent(({ lens }) => {\n  const data = lens.useRefraction(null);\n  const loading = lens.useRefraction(false);\n  const error = lens.useRefraction(null);\n  \n  const fetchData = async () => {\n    loading.set(true);\n    error.set(null);\n    \n    try {\n      const response = await fetch('/api/data');\n      const result = await response.json();\n      data.set(result);\n    } catch (err) {\n      error.set(err.message);\n    } finally {\n      loading.set(false);\n    }\n  };\n  \n  lens.useEffect(() => {\n    fetchData();\n  }, []);\n  \n  if (loading.value) return <div>Loading...</div>;\n  if (error.value) return <div>Error: {error.value}</div>;\n  \n  return (\n    <div>\n      <pre>{JSON.stringify(data.value, null, 2)}</pre>\n      <button onClick={fetchData}>Refresh</button>\n    </div>\n  );\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"state-validation",children:"State Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const ValidatedForm = createComponent(({ lens }) => {\n  const formData = lens.useRefraction({\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n  \n  const errors = lens.useDerived(() => {\n    const data = formData.value;\n    const newErrors = {};\n    \n    if (!data.email.includes('@')) {\n      newErrors.email = 'Invalid email format';\n    }\n    \n    if (data.password.length < 8) {\n      newErrors.password = 'Password must be at least 8 characters';\n    }\n    \n    if (data.password !== data.confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match';\n    }\n    \n    return newErrors;\n  }, [formData.value]);\n  \n  const isValid = lens.useDerived(() => {\n    return Object.keys(errors.value).length === 0;\n  }, [errors.value]);\n  \n  const updateField = (field, value) => {\n    formData.set(prev => ({ ...prev, [field]: value }));\n  };\n  \n  return (\n    <form>\n      <div>\n        <input\n          type=\"email\"\n          value={formData.value.email}\n          onChange={(e) => updateField('email', e.target.value)}\n          placeholder=\"Email\"\n        />\n        {errors.value.email && <span className=\"error\">{errors.value.email}</span>}\n      </div>\n      \n      <div>\n        <input\n          type=\"password\"\n          value={formData.value.password}\n          onChange={(e) => updateField('password', e.target.value)}\n          placeholder=\"Password\"\n        />\n        {errors.value.password && <span className=\"error\">{errors.value.password}</span>}\n      </div>\n      \n      <div>\n        <input\n          type=\"password\"\n          value={formData.value.confirmPassword}\n          onChange={(e) => updateField('confirmPassword', e.target.value)}\n          placeholder=\"Confirm Password\"\n        />\n        {errors.value.confirmPassword && <span className=\"error\">{errors.value.confirmPassword}</span>}\n      </div>\n      \n      <button type=\"submit\" disabled={!isValid.value}>\n        Submit\n      </button>\n    </form>\n  );\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"avoiding-unnecessary-updates",children:"Avoiding Unnecessary Updates"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Specific updates\nconst updateSpecificField = () => {\n  user.set(prev => ({ ...prev, name: 'New Name' }));\n};\n\n// \u274c Bad - Full object replacement for small changes\nconst updateBadly = () => {\n  const newUser = { ...user.value };\n  newUser.name = 'New Name';\n  user.set(newUser);\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"batching-updates",children:"Batching Updates"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const BatchedUpdates = createComponent(({ lens }) => {\n  const firstName = lens.useRefraction('');\n  const lastName = lens.useRefraction('');\n  const email = lens.useRefraction('');\n  \n  const updateAllFields = () => {\n    // Batch multiple updates to prevent multiple re-renders\n    lens.batch(() => {\n      firstName.set('John');\n      lastName.set('Doe');\n      email.set('john.doe@example.com');\n    });\n  };\n  \n  return (\n    <div>\n      <p>Name: {firstName.value} {lastName.value}</p>\n      <p>Email: {email.value}</p>\n      <button onClick={updateAllFields}>Update All</button>\n    </div>\n  );\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsx)(n.h3,{id:"testing-refractions",children:"Testing Refractions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { renderHook, act } from '@refract/testing-utils';\n\ndescribe('useRefraction', () => {\n  test('initializes with correct value', () => {\n    const { result } = renderHook(() => {\n      const lens = useLens();\n      return lens.useRefraction(42);\n    });\n    \n    expect(result.current.value).toBe(42);\n  });\n  \n  test('updates value correctly', () => {\n    const { result } = renderHook(() => {\n      const lens = useLens();\n      return lens.useRefraction(0);\n    });\n    \n    act(() => {\n      result.current.set(10);\n    });\n    \n    expect(result.current.value).toBe(10);\n  });\n  \n  test('functional updates work correctly', () => {\n    const { result } = renderHook(() => {\n      const lens = useLens();\n      return lens.useRefraction(5);\n    });\n    \n    act(() => {\n      result.current.set(prev => prev * 2);\n    });\n    \n    expect(result.current.value).toBe(10);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-initialize-with-appropriate-types",children:"1. Initialize with Appropriate Types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good\nconst items = lens.useRefraction([]);\nconst user = lens.useRefraction(null);\nconst count = lens.useRefraction(0);\n\n// \u274c Bad\nconst items = lens.useRefraction(); // undefined\nconst user = lens.useRefraction({}); // Empty object when null expected\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-use-descriptive-names",children:"2. Use Descriptive Names"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good\nconst isLoading = lens.useRefraction(false);\nconst userProfile = lens.useRefraction(null);\nconst shoppingCartItems = lens.useRefraction([]);\n\n// \u274c Bad\nconst flag = lens.useRefraction(false);\nconst data = lens.useRefraction(null);\nconst items = lens.useRefraction([]);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-keep-state-focused",children:"3. Keep State Focused"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Separate concerns\nconst firstName = lens.useRefraction('');\nconst lastName = lens.useRefraction('');\nconst email = lens.useRefraction('');\n\n// \u274c Bad - Monolithic state\nconst formData = lens.useRefraction({\n  firstName: '',\n  lastName: '',\n  email: '',\n  preferences: {},\n  settings: {},\n  // ... too much in one refraction\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"related-apis",children:"Related APIs"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./createComponent",children:"createComponent"})})," - Use refractions in components"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./useEffect",children:"useEffect"})})," - React to refraction changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./useOptic",children:"useOptic"})})," - Create reusable logic with refractions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./useLens",children:"useLens"})})," - Access the lens system"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);