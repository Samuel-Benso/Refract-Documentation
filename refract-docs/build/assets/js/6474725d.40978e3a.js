"use strict";(self.webpackChunkrefract_docs=self.webpackChunkrefract_docs||[]).push([[2992],{2708:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"tutorials/animation-basics","title":"Animation Basics","description":"Learn how to create smooth, performant animations in Refract using refractions, effects, and CSS transitions.","source":"@site/docs/tutorials/animation-basics.md","sourceDirName":"tutorials","slug":"/tutorials/animation-basics","permalink":"/docs/tutorials/animation-basics","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/tutorials/animation-basics.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Global Theme Management","permalink":"/docs/tutorials/global-theme"},"next":{"title":"Contributing to Refract","permalink":"/docs/contributing"}}');var s=t(4848),a=t(8453);const o={},r="Animation Basics",l={},c=[{value:"Overview",id:"overview",level:2},{value:"What You&#39;ll Build",id:"what-youll-build",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Basic CSS Transitions",id:"step-1-basic-css-transitions",level:2},{value:"Step 2: State-Driven Animations",id:"step-2-state-driven-animations",level:2},{value:"Step 3: Coordinated Animations",id:"step-3-coordinated-animations",level:2},{value:"Step 4: Interactive Animations",id:"step-4-interactive-animations",level:2},{value:"Step 5: Animation Utilities",id:"step-5-animation-utilities",level:2},{value:"Step 6: Performance Optimization",id:"step-6-performance-optimization",level:2},{value:"Step 7: Complete Animation Demo",id:"step-7-complete-animation-demo",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Performance Tips",id:"performance-tips",level:2},{value:"Accessibility Considerations",id:"accessibility-considerations",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"animation-basics",children:"Animation Basics"})}),"\n",(0,s.jsx)(e.p,{children:"Learn how to create smooth, performant animations in Refract using refractions, effects, and CSS transitions."}),"\n",(0,s.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(e.p,{children:"This tutorial covers the fundamentals of animation in Refract, from simple CSS transitions to complex coordinated animations using the framework's reactive state management."}),"\n",(0,s.jsx)(e.h2,{id:"what-youll-build",children:"What You'll Build"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Animated UI components with smooth transitions"}),"\n",(0,s.jsx)(e.li,{children:"State-driven animations using refractions"}),"\n",(0,s.jsx)(e.li,{children:"Coordinated multi-element animations"}),"\n",(0,s.jsx)(e.li,{children:"Performance-optimized animation patterns"}),"\n",(0,s.jsx)(e.li,{children:"Interactive animation controls"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Understanding of Refract components and refractions"}),"\n",(0,s.jsx)(e.li,{children:"Basic CSS animation knowledge"}),"\n",(0,s.jsx)(e.li,{children:"Familiarity with CSS transforms and transitions"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"step-1-basic-css-transitions",children:"Step 1: Basic CSS Transitions"}),"\n",(0,s.jsx)(e.p,{children:"Start with simple CSS-based animations that respond to state changes:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// components/AnimatedButton.js\nimport { createComponent } from 'refract-js';\n\nconst AnimatedButton = createComponent(({ lens, children, onClick }) => {\n  const isPressed = lens.useRefraction(false);\n  const isHovered = lens.useRefraction(false);\n\n  const buttonStyle = {\n    padding: '12px 24px',\n    border: 'none',\n    borderRadius: '8px',\n    background: 'linear-gradient(45deg, #667eea 0%, #764ba2 100%)',\n    color: 'white',\n    cursor: 'pointer',\n    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n    transform: `\n      scale(${isPressed.value ? 0.95 : isHovered.value ? 1.05 : 1})\n      translateY(${isPressed.value ? '2px' : isHovered.value ? '-2px' : '0px'})\n    `,\n    boxShadow: isHovered.value \n      ? '0 10px 25px rgba(102, 126, 234, 0.4)' \n      : '0 4px 15px rgba(102, 126, 234, 0.2)',\n  };\n\n  return (\n    <button\n      style={buttonStyle}\n      onMouseEnter={() => isHovered.set(true)}\n      onMouseLeave={() => isHovered.set(false)}\n      onMouseDown={() => isPressed.set(true)}\n      onMouseUp={() => isPressed.set(false)}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n});\n\nexport default AnimatedButton;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"step-2-state-driven-animations",children:"Step 2: State-Driven Animations"}),"\n",(0,s.jsx)(e.p,{children:"Create animations that respond to application state changes:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// components/ProgressBar.js\nimport { createComponent } from 'refract-js';\n\nconst ProgressBar = createComponent(({ lens, progress = 0, animated = true }) => {\n  const animatedProgress = lens.useRefraction(0);\n  const isVisible = lens.useRefraction(false);\n\n  // Animate progress changes\n  lens.useEffect(() => {\n    if (animated) {\n      const duration = 1000; // 1 second\n      const startTime = Date.now();\n      const startProgress = animatedProgress.value;\n      const targetProgress = Math.max(0, Math.min(100, progress));\n\n      const animate = () => {\n        const elapsed = Date.now() - startTime;\n        const t = Math.min(elapsed / duration, 1);\n        \n        // Easing function (ease-out)\n        const eased = 1 - Math.pow(1 - t, 3);\n        const currentProgress = startProgress + (targetProgress - startProgress) * eased;\n        \n        animatedProgress.set(currentProgress);\n        \n        if (t < 1) {\n          requestAnimationFrame(animate);\n        }\n      };\n      \n      requestAnimationFrame(animate);\n    } else {\n      animatedProgress.set(progress);\n    }\n  }, [progress, animated]);\n\n  // Entrance animation\n  lens.useEffect(() => {\n    const timer = setTimeout(() => isVisible.set(true), 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const containerStyle = {\n    width: '100%',\n    height: '8px',\n    backgroundColor: '#e0e0e0',\n    borderRadius: '4px',\n    overflow: 'hidden',\n    opacity: isVisible.value ? 1 : 0,\n    transform: `scaleX(${isVisible.value ? 1 : 0})`,\n    transformOrigin: 'left center',\n    transition: 'opacity 0.5s ease, transform 0.5s ease',\n  };\n\n  const fillStyle = {\n    height: '100%',\n    background: 'linear-gradient(90deg, #4facfe 0%, #00f2fe 100%)',\n    borderRadius: '4px',\n    width: `${animatedProgress.value}%`,\n    transition: animated ? 'none' : 'width 0.3s ease',\n    position: 'relative',\n    overflow: 'hidden',\n  };\n\n  const shimmerStyle = {\n    position: 'absolute',\n    top: 0,\n    left: '-100%',\n    width: '100%',\n    height: '100%',\n    background: 'linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent)',\n    animation: animatedProgress.value > 0 ? 'shimmer 2s infinite' : 'none',\n  };\n\n  return (\n    <div style={containerStyle}>\n      <div style={fillStyle}>\n        <div style={shimmerStyle} />\n      </div>\n      <style jsx>{`\n        @keyframes shimmer {\n          0% { left: -100%; }\n          100% { left: 100%; }\n        }\n      `}</style>\n    </div>\n  );\n});\n\nexport default ProgressBar;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"step-3-coordinated-animations",children:"Step 3: Coordinated Animations"}),"\n",(0,s.jsx)(e.p,{children:"Create animations that coordinate multiple elements:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// components/StaggeredList.js\nimport { createComponent } from 'refract-js';\n\nconst StaggeredList = createComponent(({ lens, items = [], staggerDelay = 100 }) => {\n  const visibleItems = lens.useRefraction(new Set());\n  const isVisible = lens.useRefraction(false);\n\n  // Staggered entrance animation\n  lens.useEffect(() => {\n    if (items.length === 0) return;\n\n    const timer = setTimeout(() => {\n      isVisible.set(true);\n      \n      items.forEach((_, index) => {\n        setTimeout(() => {\n          visibleItems.set(prev => new Set([...prev, index]));\n        }, index * staggerDelay);\n      });\n    }, 200);\n\n    return () => clearTimeout(timer);\n  }, [items.length, staggerDelay]);\n\n  // Reset when items change\n  lens.useEffect(() => {\n    visibleItems.set(new Set());\n    isVisible.set(false);\n  }, [items]);\n\n  const containerStyle = {\n    opacity: isVisible.value ? 1 : 0,\n    transition: 'opacity 0.3s ease',\n  };\n\n  return (\n    <div style={containerStyle}>\n      {items.map((item, index) => (\n        <StaggeredListItem\n          key={item.id || index}\n          lens={lens}\n          item={item}\n          index={index}\n          isVisible={visibleItems.value.has(index)}\n        />\n      ))}\n    </div>\n  );\n});\n\nconst StaggeredListItem = createComponent(({ lens, item, index, isVisible }) => {\n  const itemStyle = {\n    padding: '16px',\n    margin: '8px 0',\n    backgroundColor: '#f8f9fa',\n    borderRadius: '8px',\n    border: '1px solid #e9ecef',\n    opacity: isVisible ? 1 : 0,\n    transform: `translateY(${isVisible ? '0px' : '20px'}) scale(${isVisible ? 1 : 0.95})`,\n    transition: 'all 0.5s cubic-bezier(0.4, 0, 0.2, 1)',\n    transitionDelay: isVisible ? '0ms' : '0ms',\n  };\n\n  return (\n    <div style={itemStyle}>\n      <h3>{item.title}</h3>\n      <p>{item.description}</p>\n    </div>\n  );\n});\n\nexport default StaggeredList;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"step-4-interactive-animations",children:"Step 4: Interactive Animations"}),"\n",(0,s.jsx)(e.p,{children:"Build animations that respond to user interactions:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// components/DraggableCard.js\nimport { createComponent } from 'refract-js';\n\nconst DraggableCard = createComponent(({ lens, children }) => {\n  const position = lens.useRefraction({ x: 0, y: 0 });\n  const isDragging = lens.useRefraction(false);\n  const dragStart = lens.useRefraction({ x: 0, y: 0 });\n  const rotation = lens.useRefraction(0);\n\n  const handleMouseDown = (e) => {\n    isDragging.set(true);\n    dragStart.set({\n      x: e.clientX - position.value.x,\n      y: e.clientY - position.value.y,\n    });\n  };\n\n  const handleMouseMove = (e) => {\n    if (!isDragging.value) return;\n\n    const newX = e.clientX - dragStart.value.x;\n    const newY = e.clientY - dragStart.value.y;\n    \n    position.set({ x: newX, y: newY });\n    \n    // Add rotation based on horizontal movement\n    const rotationAmount = (newX / window.innerWidth) * 30;\n    rotation.set(rotationAmount);\n  };\n\n  const handleMouseUp = () => {\n    isDragging.set(false);\n    \n    // Snap back to center with spring animation\n    const springBack = () => {\n      const currentPos = position.value;\n      const currentRot = rotation.value;\n      \n      const springStrength = 0.1;\n      const damping = 0.8;\n      \n      const newX = currentPos.x * damping;\n      const newY = currentPos.y * damping;\n      const newRot = currentRot * damping;\n      \n      position.set({ x: newX, y: newY });\n      rotation.set(newRot);\n      \n      if (Math.abs(newX) > 1 || Math.abs(newY) > 1 || Math.abs(newRot) > 1) {\n        requestAnimationFrame(springBack);\n      } else {\n        position.set({ x: 0, y: 0 });\n        rotation.set(0);\n      }\n    };\n    \n    requestAnimationFrame(springBack);\n  };\n\n  // Add global mouse event listeners\n  lens.useEffect(() => {\n    if (isDragging.value) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      \n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isDragging.value]);\n\n  const cardStyle = {\n    width: '300px',\n    height: '200px',\n    backgroundColor: 'white',\n    borderRadius: '12px',\n    boxShadow: isDragging.value \n      ? '0 20px 40px rgba(0,0,0,0.2)' \n      : '0 4px 20px rgba(0,0,0,0.1)',\n    cursor: isDragging.value ? 'grabbing' : 'grab',\n    userSelect: 'none',\n    transform: `\n      translate(${position.value.x}px, ${position.value.y}px) \n      rotate(${rotation.value}deg)\n      scale(${isDragging.value ? 1.05 : 1})\n    `,\n    transition: isDragging.value ? 'none' : 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n    padding: '20px',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  };\n\n  return (\n    <div\n      style={cardStyle}\n      onMouseDown={handleMouseDown}\n    >\n      {children}\n    </div>\n  );\n});\n\nexport default DraggableCard;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"step-5-animation-utilities",children:"Step 5: Animation Utilities"}),"\n",(0,s.jsx)(e.p,{children:"Create reusable animation utilities and hooks:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// utils/animations.js\nimport { createOptic } from 'refract-js';\n\n// Spring animation utility\nexport const useSpring = createOptic((lens, config = {}) => {\n  const {\n    stiffness = 100,\n    damping = 10,\n    mass = 1,\n    precision = 0.01,\n  } = config;\n\n  const value = lens.useRefraction(0);\n  const velocity = lens.useRefraction(0);\n  const target = lens.useRefraction(0);\n  const isAnimating = lens.useRefraction(false);\n\n  const animate = () => {\n    const currentValue = value.value;\n    const currentVelocity = velocity.value;\n    const targetValue = target.value;\n\n    const displacement = targetValue - currentValue;\n    const springForce = displacement * stiffness;\n    const dampingForce = currentVelocity * damping;\n    const acceleration = (springForce - dampingForce) / mass;\n\n    const newVelocity = currentVelocity + acceleration * 0.016; // 60fps\n    const newValue = currentValue + newVelocity * 0.016;\n\n    velocity.set(newVelocity);\n    value.set(newValue);\n\n    const isSettled = Math.abs(displacement) < precision && Math.abs(newVelocity) < precision;\n    \n    if (!isSettled) {\n      requestAnimationFrame(animate);\n    } else {\n      value.set(targetValue);\n      velocity.set(0);\n      isAnimating.set(false);\n    }\n  };\n\n  const setTarget = (newTarget) => {\n    target.set(newTarget);\n    if (!isAnimating.value) {\n      isAnimating.set(true);\n      requestAnimationFrame(animate);\n    }\n  };\n\n  return {\n    value: value.value,\n    setTarget,\n    isAnimating: isAnimating.value,\n  };\n});\n\n// Tween animation utility\nexport const useTween = createOptic((lens, duration = 1000, easing = 'ease-out') => {\n  const value = lens.useRefraction(0);\n  const isAnimating = lens.useRefraction(false);\n\n  const easingFunctions = {\n    'linear': t => t,\n    'ease-in': t => t * t,\n    'ease-out': t => 1 - Math.pow(1 - t, 2),\n    'ease-in-out': t => t < 0.5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2,\n  };\n\n  const animate = (from, to, onComplete) => {\n    const startTime = Date.now();\n    const startValue = from;\n    const targetValue = to;\n    const easeFn = easingFunctions[easing] || easingFunctions['ease-out'];\n\n    isAnimating.set(true);\n\n    const tick = () => {\n      const elapsed = Date.now() - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n      const easedProgress = easeFn(progress);\n      const currentValue = startValue + (targetValue - startValue) * easedProgress;\n\n      value.set(currentValue);\n\n      if (progress < 1) {\n        requestAnimationFrame(tick);\n      } else {\n        isAnimating.set(false);\n        if (onComplete) onComplete();\n      }\n    };\n\n    requestAnimationFrame(tick);\n  };\n\n  return {\n    value: value.value,\n    animate,\n    isAnimating: isAnimating.value,\n  };\n});\n\n// Stagger utility for coordinated animations\nexport const useStagger = createOptic((lens, items, delay = 100) => {\n  const visibleIndices = lens.useRefraction(new Set());\n  const isComplete = lens.useRefraction(false);\n\n  const start = () => {\n    visibleIndices.set(new Set());\n    isComplete.set(false);\n\n    items.forEach((_, index) => {\n      setTimeout(() => {\n        visibleIndices.set(prev => new Set([...prev, index]));\n        \n        if (index === items.length - 1) {\n          setTimeout(() => isComplete.set(true), delay);\n        }\n      }, index * delay);\n    });\n  };\n\n  const reset = () => {\n    visibleIndices.set(new Set());\n    isComplete.set(false);\n  };\n\n  return {\n    visibleIndices: visibleIndices.value,\n    isComplete: isComplete.value,\n    start,\n    reset,\n  };\n});\n"})}),"\n",(0,s.jsx)(e.h2,{id:"step-6-performance-optimization",children:"Step 6: Performance Optimization"}),"\n",(0,s.jsx)(e.p,{children:"Optimize animations for better performance:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// components/OptimizedAnimatedList.js\nimport { createComponent } from 'refract-js';\n\nconst OptimizedAnimatedList = createComponent(({ lens, items }) => {\n  const animationState = lens.useRefraction('idle'); // idle, entering, visible, exiting\n  const visibleItems = lens.useRefraction([]);\n\n  // Use RAF for smooth animations\n  const animateIn = () => {\n    animationState.set('entering');\n    \n    const batchSize = 5;\n    let currentBatch = 0;\n    \n    const processBatch = () => {\n      const start = currentBatch * batchSize;\n      const end = Math.min(start + batchSize, items.length);\n      const batch = items.slice(start, end);\n      \n      visibleItems.set(prev => [...prev, ...batch]);\n      currentBatch++;\n      \n      if (end < items.length) {\n        requestAnimationFrame(processBatch);\n      } else {\n        animationState.set('visible');\n      }\n    };\n    \n    requestAnimationFrame(processBatch);\n  };\n\n  // Trigger animation on mount\n  lens.useEffect(() => {\n    if (items.length > 0) {\n      animateIn();\n    }\n  }, [items.length]);\n\n  // Use CSS transforms instead of changing layout properties\n  const containerStyle = {\n    opacity: animationState.value === 'idle' ? 0 : 1,\n    transform: `translateY(${animationState.value === 'idle' ? '20px' : '0px'})`,\n    transition: 'opacity 0.3s ease, transform 0.3s ease',\n    willChange: animationState.value === 'entering' ? 'transform, opacity' : 'auto',\n  };\n\n  return (\n    <div style={containerStyle}>\n      {visibleItems.value.map((item, index) => (\n        <OptimizedListItem\n          key={item.id}\n          lens={lens}\n          item={item}\n          index={index}\n        />\n      ))}\n    </div>\n  );\n});\n\nconst OptimizedListItem = createComponent(({ lens, item, index }) => {\n  const isVisible = lens.useRefraction(false);\n\n  lens.useEffect(() => {\n    // Stagger the appearance\n    const timer = setTimeout(() => {\n      isVisible.set(true);\n    }, index * 50);\n\n    return () => clearTimeout(timer);\n  }, [index]);\n\n  const itemStyle = {\n    opacity: isVisible.value ? 1 : 0,\n    transform: `translateX(${isVisible.value ? '0px' : '-20px'})`,\n    transition: 'opacity 0.3s ease, transform 0.3s ease',\n    // Use transform3d to enable hardware acceleration\n    transform: `translate3d(${isVisible.value ? '0px' : '-20px'}, 0, 0)`,\n    willChange: isVisible.value ? 'auto' : 'transform, opacity',\n  };\n\n  return (\n    <div style={itemStyle}>\n      {item.content}\n    </div>\n  );\n});\n\nexport default OptimizedAnimatedList;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"step-7-complete-animation-demo",children:"Step 7: Complete Animation Demo"}),"\n",(0,s.jsx)(e.p,{children:"Put everything together in a comprehensive demo:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// App.js\nimport { createComponent, createApp } from 'refract-js';\nimport AnimatedButton from './components/AnimatedButton.js';\nimport ProgressBar from './components/ProgressBar.js';\nimport StaggeredList from './components/StaggeredList.js';\nimport DraggableCard from './components/DraggableCard.js';\nimport { useSpring, useTween } from './utils/animations.js';\n\nconst AnimationDemo = createComponent(({ lens }) => {\n  const progress = lens.useRefraction(0);\n  const spring = useSpring(lens, { stiffness: 120, damping: 14 });\n  const tween = useTween(lens, 2000, 'ease-in-out');\n\n  const demoItems = [\n    { id: 1, title: 'Smooth Transitions', description: 'CSS-based animations with state' },\n    { id: 2, title: 'Spring Physics', description: 'Natural motion with spring animations' },\n    { id: 3, title: 'Coordinated Motion', description: 'Multiple elements moving together' },\n    { id: 4, title: 'Interactive Gestures', description: 'Drag and drop with physics' },\n  ];\n\n  const handleProgressUpdate = () => {\n    const newProgress = Math.min(progress.value + 25, 100);\n    progress.set(newProgress);\n  };\n\n  const handleSpringDemo = () => {\n    spring.setTarget(Math.random() * 200);\n  };\n\n  const handleTweenDemo = () => {\n    tween.animate(0, 100, () => {\n      setTimeout(() => tween.animate(100, 0), 500);\n    });\n  };\n\n  return (\n    <div style={{ padding: '40px', maxWidth: '800px', margin: '0 auto' }}>\n      <h1>Refract Animation Showcase</h1>\n      \n      <section style={{ marginBottom: '40px' }}>\n        <h2>Interactive Buttons</h2>\n        <div style={{ display: 'flex', gap: '16px', flexWrap: 'wrap' }}>\n          <AnimatedButton lens={lens} onClick={handleProgressUpdate}>\n            Update Progress\n          </AnimatedButton>\n          <AnimatedButton lens={lens} onClick={handleSpringDemo}>\n            Spring Demo\n          </AnimatedButton>\n          <AnimatedButton lens={lens} onClick={handleTweenDemo}>\n            Tween Demo\n          </AnimatedButton>\n        </div>\n      </section>\n\n      <section style={{ marginBottom: '40px' }}>\n        <h2>Progress Animation</h2>\n        <ProgressBar lens={lens} progress={progress.value} />\n        <p>Progress: {Math.round(progress.value)}%</p>\n      </section>\n\n      <section style={{ marginBottom: '40px' }}>\n        <h2>Spring Physics</h2>\n        <div style={{ height: '60px', position: 'relative', backgroundColor: '#f0f0f0', borderRadius: '8px' }}>\n          <div style={{\n            position: 'absolute',\n            left: `${spring.value}px`,\n            top: '10px',\n            width: '40px',\n            height: '40px',\n            backgroundColor: '#667eea',\n            borderRadius: '50%',\n            transition: 'none',\n          }} />\n        </div>\n      </section>\n\n      <section style={{ marginBottom: '40px' }}>\n        <h2>Tween Animation</h2>\n        <div style={{ height: '60px', position: 'relative', backgroundColor: '#f0f0f0', borderRadius: '8px' }}>\n          <div style={{\n            position: 'absolute',\n            left: `${tween.value * 2}px`,\n            top: '10px',\n            width: '40px',\n            height: '40px',\n            backgroundColor: '#764ba2',\n            borderRadius: '8px',\n            transition: 'none',\n          }} />\n        </div>\n      </section>\n\n      <section style={{ marginBottom: '40px' }}>\n        <h2>Staggered List</h2>\n        <StaggeredList lens={lens} items={demoItems} />\n      </section>\n\n      <section style={{ marginBottom: '40px' }}>\n        <h2>Draggable Card</h2>\n        <div style={{ display: 'flex', justifyContent: 'center', padding: '40px' }}>\n          <DraggableCard lens={lens}>\n            <div style={{ textAlign: 'center' }}>\n              <h3>Drag Me!</h3>\n              <p>Click and drag to move</p>\n            </div>\n          </DraggableCard>\n        </div>\n      </section>\n    </div>\n  );\n});\n\nconst app = createApp();\napp.mount(AnimationDemo, '#root');\n"})}),"\n",(0,s.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Use CSS transforms"})," instead of changing layout properties for better performance"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Enable hardware acceleration"})," with ",(0,s.jsx)(e.code,{children:"transform3d()"})," and ",(0,s.jsx)(e.code,{children:"will-change"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Batch DOM updates"})," using ",(0,s.jsx)(e.code,{children:"requestAnimationFrame"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Clean up animations"})," in effect cleanup functions"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Respect user preferences"})," like ",(0,s.jsx)(e.code,{children:"prefers-reduced-motion"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Use appropriate easing"})," functions for natural motion"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Optimize for 60fps"})," by keeping frame budgets under 16ms"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Use ",(0,s.jsx)(e.code,{children:"transform"})," and ",(0,s.jsx)(e.code,{children:"opacity"})," for animations when possible"]}),"\n",(0,s.jsxs)(e.li,{children:["Avoid animating layout properties like ",(0,s.jsx)(e.code,{children:"width"}),", ",(0,s.jsx)(e.code,{children:"height"}),", ",(0,s.jsx)(e.code,{children:"top"}),", ",(0,s.jsx)(e.code,{children:"left"})]}),"\n",(0,s.jsxs)(e.li,{children:["Use ",(0,s.jsx)(e.code,{children:"will-change"})," sparingly and remove it when animations complete"]}),"\n",(0,s.jsx)(e.li,{children:"Debounce rapid state changes that trigger animations"}),"\n",(0,s.jsx)(e.li,{children:"Consider using CSS animations for simple, repeating animations"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"accessibility-considerations",children:"Accessibility Considerations"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// Respect user motion preferences\nconst respectsReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\nconst animationDuration = respectsReducedMotion ? 0 : 300;\nconst shouldAnimate = !respectsReducedMotion;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(e.p,{children:"You've learned how to create smooth, performant animations in Refract using a combination of reactive state management and modern CSS techniques. These patterns provide a solid foundation for building engaging, interactive user interfaces that feel responsive and polished."})]})}function m(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>r});var i=t(6540);const s={},a=i.createContext(s);function o(n){const e=i.useContext(a);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:o(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);