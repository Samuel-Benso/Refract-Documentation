"use strict";(self.webpackChunkrefract_docs=self.webpackChunkrefract_docs||[]).push([[1050],{5360:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"tutorials/global-theme","title":"Global Theme Management","description":"Learn how to implement a global theme system in Refract using refractions and optics for consistent styling across your application.","source":"@site/docs/tutorials/global-theme.md","sourceDirName":"tutorials","slug":"/tutorials/global-theme","permalink":"/docs/tutorials/global-theme","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/tutorials/global-theme.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Building a Todo List App","permalink":"/docs/tutorials/todo-list"},"next":{"title":"Animation Basics","permalink":"/docs/tutorials/animation-basics"}}');var r=t(4848),o=t(8453);const i={},a="Global Theme Management",l={},c=[{value:"Overview",id:"overview",level:2},{value:"What You&#39;ll Build",id:"what-youll-build",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Create the Theme Store",id:"step-1-create-the-theme-store",level:2},{value:"Step 2: Create Theme Provider Component",id:"step-2-create-theme-provider-component",level:2},{value:"Step 3: Create Theme Utilities",id:"step-3-create-theme-utilities",level:2},{value:"Step 4: Create Theme Switcher Component",id:"step-4-create-theme-switcher-component",level:2},{value:"Step 5: Create Theme-Aware Components",id:"step-5-create-theme-aware-components",level:2},{value:"Step 6: Add CSS Styles",id:"step-6-add-css-styles",level:2},{value:"Step 7: Complete App Setup",id:"step-7-complete-app-setup",level:2},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Custom Theme Creation",id:"custom-theme-creation",level:3},{value:"System Theme Detection",id:"system-theme-detection",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Theme Not Persisting",id:"theme-not-persisting",level:3},{value:"Styles Not Updating",id:"styles-not-updating",level:3},{value:"Performance Issues",id:"performance-issues",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"global-theme-management",children:"Global Theme Management"})}),"\n",(0,r.jsx)(n.p,{children:"Learn how to implement a global theme system in Refract using refractions and optics for consistent styling across your application."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"This tutorial demonstrates how to create a flexible theme system that allows users to switch between light and dark modes, customize colors, and maintain theme persistence across sessions."}),"\n",(0,r.jsx)(n.h2,{id:"what-youll-build",children:"What You'll Build"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A global theme provider using refractions"}),"\n",(0,r.jsx)(n.li,{children:"Theme switching functionality"}),"\n",(0,r.jsx)(n.li,{children:"Persistent theme storage"}),"\n",(0,r.jsx)(n.li,{children:"Dynamic CSS custom properties"}),"\n",(0,r.jsx)(n.li,{children:"Theme-aware components"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Basic understanding of Refract components and refractions"}),"\n",(0,r.jsx)(n.li,{children:"Familiarity with CSS custom properties"}),"\n",(0,r.jsx)(n.li,{children:"Knowledge of localStorage API"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"step-1-create-the-theme-store",children:"Step 1: Create the Theme Store"}),"\n",(0,r.jsx)(n.p,{children:"First, let's create a global theme store using refractions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// theme/themeStore.js\nimport { createRefraction } from 'refract-js';\n\n// Define available themes\nexport const themes = {\n  light: {\n    name: 'light',\n    colors: {\n      primary: '#007bff',\n      secondary: '#6c757d',\n      background: '#ffffff',\n      surface: '#f8f9fa',\n      text: '#212529',\n      textSecondary: '#6c757d',\n      border: '#dee2e6',\n      shadow: 'rgba(0, 0, 0, 0.1)',\n    },\n    spacing: {\n      xs: '4px',\n      sm: '8px',\n      md: '16px',\n      lg: '24px',\n      xl: '32px',\n    },\n    borderRadius: {\n      sm: '4px',\n      md: '8px',\n      lg: '12px',\n    },\n  },\n  dark: {\n    name: 'dark',\n    colors: {\n      primary: '#0d6efd',\n      secondary: '#6c757d',\n      background: '#121212',\n      surface: '#1e1e1e',\n      text: '#ffffff',\n      textSecondary: '#adb5bd',\n      border: '#343a40',\n      shadow: 'rgba(0, 0, 0, 0.3)',\n    },\n    spacing: {\n      xs: '4px',\n      sm: '8px',\n      md: '16px',\n      lg: '24px',\n      xl: '32px',\n    },\n    borderRadius: {\n      sm: '4px',\n      md: '8px',\n      lg: '12px',\n    },\n  },\n};\n\n// Load theme from localStorage or default to light\nconst getInitialTheme = () => {\n  if (typeof window !== 'undefined') {\n    const saved = localStorage.getItem('refract-theme');\n    return saved && themes[saved] ? themes[saved] : themes.light;\n  }\n  return themes.light;\n};\n\n// Create global theme refraction\nexport const themeStore = createRefraction(getInitialTheme());\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-2-create-theme-provider-component",children:"Step 2: Create Theme Provider Component"}),"\n",(0,r.jsx)(n.p,{children:"Now let's create a theme provider that applies CSS custom properties:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// theme/ThemeProvider.js\nimport { createComponent } from 'refract-js';\nimport { themeStore } from './themeStore.js';\n\nconst ThemeProvider = createComponent(({ lens, children }) => {\n  const theme = lens.useRefraction(themeStore);\n\n  // Apply theme to CSS custom properties\n  lens.useEffect(() => {\n    const root = document.documentElement;\n    const currentTheme = theme.value;\n\n    // Apply color variables\n    Object.entries(currentTheme.colors).forEach(([key, value]) => {\n      root.style.setProperty(`--color-${key}`, value);\n    });\n\n    // Apply spacing variables\n    Object.entries(currentTheme.spacing).forEach(([key, value]) => {\n      root.style.setProperty(`--spacing-${key}`, value);\n    });\n\n    // Apply border radius variables\n    Object.entries(currentTheme.borderRadius).forEach(([key, value]) => {\n      root.style.setProperty(`--radius-${key}`, value);\n    });\n\n    // Add theme class to body\n    document.body.className = `theme-${currentTheme.name}`;\n\n    // Persist theme choice\n    localStorage.setItem('refract-theme', currentTheme.name);\n  }, [theme.value]);\n\n  return (\n    <div className=\"theme-provider\">\n      {children}\n    </div>\n  );\n});\n\nexport default ThemeProvider;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-3-create-theme-utilities",children:"Step 3: Create Theme Utilities"}),"\n",(0,r.jsx)(n.p,{children:"Let's create utility functions and hooks for working with themes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// theme/useTheme.js\nimport { createOptic } from 'refract-js';\nimport { themeStore, themes } from './themeStore.js';\n\nexport const useTheme = createOptic((lens) => {\n  const theme = lens.useRefraction(themeStore);\n\n  const setTheme = (themeName) => {\n    if (themes[themeName]) {\n      theme.set(themes[themeName]);\n    }\n  };\n\n  const toggleTheme = () => {\n    const current = theme.value.name;\n    const next = current === 'light' ? 'dark' : 'light';\n    setTheme(next);\n  };\n\n  const isDark = theme.value.name === 'dark';\n  const isLight = theme.value.name === 'light';\n\n  return {\n    theme: theme.value,\n    setTheme,\n    toggleTheme,\n    isDark,\n    isLight,\n    availableThemes: Object.keys(themes),\n  };\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-4-create-theme-switcher-component",children:"Step 4: Create Theme Switcher Component"}),"\n",(0,r.jsx)(n.p,{children:"Now let's build a component for switching themes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// components/ThemeSwitcher.js\nimport { createComponent } from 'refract-js';\nimport { useTheme } from '../theme/useTheme.js';\n\nconst ThemeSwitcher = createComponent(({ lens }) => {\n  const { theme, toggleTheme, isDark } = useTheme(lens);\n\n  return (\n    <button \n      className=\"theme-switcher\"\n      onClick={toggleTheme}\n      aria-label={`Switch to ${isDark ? 'light' : 'dark'} theme`}\n    >\n      <span className=\"theme-icon\">\n        {isDark ? '\u2600\ufe0f' : '\ud83c\udf19'}\n      </span>\n      <span className=\"theme-label\">\n        {isDark ? 'Light Mode' : 'Dark Mode'}\n      </span>\n    </button>\n  );\n});\n\nexport default ThemeSwitcher;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-5-create-theme-aware-components",children:"Step 5: Create Theme-Aware Components"}),"\n",(0,r.jsx)(n.p,{children:"Let's create components that respond to theme changes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// components/Card.js\nimport { createComponent } from 'refract-js';\nimport { useTheme } from '../theme/useTheme.js';\n\nconst Card = createComponent(({ lens, children, className = '' }) => {\n  const { theme } = useTheme(lens);\n\n  const cardStyle = {\n    backgroundColor: `var(--color-surface)`,\n    color: `var(--color-text)`,\n    border: `1px solid var(--color-border)`,\n    borderRadius: `var(--radius-md)`,\n    padding: `var(--spacing-lg)`,\n    boxShadow: `0 2px 8px var(--color-shadow)`,\n    transition: 'all 0.2s ease',\n  };\n\n  return (\n    <div \n      className={`card ${className}`}\n      style={cardStyle}\n    >\n      {children}\n    </div>\n  );\n});\n\nexport default Card;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-6-add-css-styles",children:"Step 6: Add CSS Styles"}),"\n",(0,r.jsx)(n.p,{children:"Create CSS that works with your theme system:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-css",children:"/* styles/theme.css */\n:root {\n  /* Default light theme variables will be set by ThemeProvider */\n  --transition-theme: all 0.2s ease;\n}\n\n.theme-provider {\n  min-height: 100vh;\n  background-color: var(--color-background);\n  color: var(--color-text);\n  transition: var(--transition-theme);\n}\n\n.theme-switcher {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-sm);\n  padding: var(--spacing-sm) var(--spacing-md);\n  background-color: var(--color-surface);\n  color: var(--color-text);\n  border: 1px solid var(--color-border);\n  border-radius: var(--radius-md);\n  cursor: pointer;\n  transition: var(--transition-theme);\n}\n\n.theme-switcher:hover {\n  background-color: var(--color-primary);\n  color: white;\n  transform: translateY(-1px);\n}\n\n.theme-icon {\n  font-size: 1.2em;\n}\n\n.theme-label {\n  font-weight: 500;\n}\n\n/* Theme-specific styles */\n.theme-light {\n  color-scheme: light;\n}\n\n.theme-dark {\n  color-scheme: dark;\n}\n\n/* Smooth transitions for theme changes */\n* {\n  transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-7-complete-app-setup",children:"Step 7: Complete App Setup"}),"\n",(0,r.jsx)(n.p,{children:"Finally, let's put it all together in your main app:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// App.js\nimport { createComponent, createApp } from 'refract-js';\nimport ThemeProvider from './theme/ThemeProvider.js';\nimport ThemeSwitcher from './components/ThemeSwitcher.js';\nimport Card from './components/Card.js';\nimport './styles/theme.css';\n\nconst App = createComponent(({ lens }) => {\n  return (\n    <ThemeProvider lens={lens}>\n      <div className=\"app\">\n        <header className=\"app-header\">\n          <h1>Refract Theme Demo</h1>\n          <ThemeSwitcher lens={lens} />\n        </header>\n        \n        <main className=\"app-main\">\n          <Card lens={lens} className=\"welcome-card\">\n            <h2>Welcome to Refract!</h2>\n            <p>This app demonstrates global theme management with automatic persistence and smooth transitions.</p>\n          </Card>\n          \n          <Card lens={lens} className=\"features-card\">\n            <h3>Theme Features</h3>\n            <ul>\n              <li>Light and dark mode support</li>\n              <li>Persistent theme selection</li>\n              <li>CSS custom properties integration</li>\n              <li>Smooth theme transitions</li>\n              <li>Theme-aware components</li>\n            </ul>\n          </Card>\n        </main>\n      </div>\n    </ThemeProvider>\n  );\n});\n\nconst app = createApp();\napp.mount(App, '#root');\n"})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,r.jsx)(n.h3,{id:"custom-theme-creation",children:"Custom Theme Creation"}),"\n",(0,r.jsx)(n.p,{children:"You can extend the theme system to support custom themes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// theme/customThemes.js\nexport const createCustomTheme = (name, overrides) => {\n  return {\n    name,\n    ...themes.light,\n    ...overrides,\n    colors: {\n      ...themes.light.colors,\n      ...overrides.colors,\n    },\n  };\n};\n\n// Usage\nconst oceanTheme = createCustomTheme('ocean', {\n  colors: {\n    primary: '#0077be',\n    background: '#f0f8ff',\n    surface: '#e6f3ff',\n  },\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"system-theme-detection",children:"System Theme Detection"}),"\n",(0,r.jsx)(n.p,{children:"Add automatic system theme detection:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// theme/systemTheme.js\nexport const useSystemTheme = createOptic((lens) => {\n  const { setTheme } = useTheme(lens);\n  \n  lens.useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    \n    const handleChange = (e) => {\n      setTheme(e.matches ? 'dark' : 'light');\n    };\n    \n    mediaQuery.addEventListener('change', handleChange);\n    \n    // Set initial theme based on system preference\n    handleChange(mediaQuery);\n    \n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance"}),": Use CSS custom properties for theme values to avoid re-rendering components"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Accessibility"}),": Respect user's ",(0,r.jsx)(n.code,{children:"prefers-color-scheme"})," setting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Persistence"}),": Save theme preferences to localStorage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Transitions"}),": Add smooth transitions between theme changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fallbacks"}),": Always provide fallback values for theme properties"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"theme-not-persisting",children:"Theme Not Persisting"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Check localStorage permissions"}),"\n",(0,r.jsx)(n.li,{children:"Verify theme names match exactly"}),"\n",(0,r.jsx)(n.li,{children:"Ensure ThemeProvider is mounted before other components"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"styles-not-updating",children:"Styles Not Updating"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Confirm CSS custom properties are properly set"}),"\n",(0,r.jsx)(n.li,{children:"Check for CSS specificity issues"}),"\n",(0,r.jsx)(n.li,{children:"Verify theme transitions are not interfering"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"performance-issues",children:"Performance Issues"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use CSS custom properties instead of inline styles"}),"\n",(0,r.jsx)(n.li,{children:"Avoid unnecessary re-renders by memoizing theme values"}),"\n",(0,r.jsx)(n.li,{children:"Consider using CSS-in-JS libraries for complex theming"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Explore animation integration with themes"}),"\n",(0,r.jsx)(n.li,{children:"Learn about server-side rendering with themes"}),"\n",(0,r.jsx)(n.li,{children:"Build more complex theme-aware components"}),"\n",(0,r.jsx)(n.li,{children:"Implement theme customization interfaces"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"You've successfully implemented a comprehensive global theme system in Refract! This system provides a solid foundation for building applications with consistent, customizable styling that respects user preferences and maintains state across sessions."}),"\n",(0,r.jsx)(n.p,{children:"The combination of Refract's reactive state management with CSS custom properties creates a powerful and performant theming solution that scales well with your application's growth."})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);