"use strict";(self.webpackChunkrefract_docs=self.webpackChunkrefract_docs||[]).push([[328],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var o=t(6540);const a={},s=o.createContext(a);function i(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(s.Provider,{value:n},e.children)}},9041:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"concepts/components","title":"Components","description":"Components are the building blocks of Refract applications. They are pure functions that describe what the UI should look like based on the current state. Unlike traditional frameworks, Refract components are created using the createComponent() function and receive reactive capabilities through the lens system.","source":"@site/docs/concepts/components.md","sourceDirName":"concepts","slug":"/concepts/components","permalink":"/docs/concepts/components","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/concepts/components.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started","permalink":"/docs/getting-started"},"next":{"title":"Refractions","permalink":"/docs/concepts/refractions"}}');var a=t(4848),s=t(8453);const i={},r="Components",c={},l=[{value:"Creating Components",id:"creating-components",level:2},{value:"Basic Component Structure",id:"basic-component-structure",level:3},{value:"Component with Props",id:"component-with-props",level:3},{value:"Component Lifecycle",id:"component-lifecycle",level:2},{value:"Mount Phase",id:"mount-phase",level:3},{value:"Update Phase",id:"update-phase",level:3},{value:"Cleanup Phase",id:"cleanup-phase",level:3},{value:"State Management in Components",id:"state-management-in-components",level:2},{value:"Local State with Refractions",id:"local-state-with-refractions",level:3},{value:"Computed Values",id:"computed-values",level:3},{value:"Component Composition",id:"component-composition",level:2},{value:"Parent-Child Communication",id:"parent-child-communication",level:3},{value:"Higher-Order Components (HOCs)",id:"higher-order-components-hocs",level:3},{value:"Component Patterns",id:"component-patterns",level:2},{value:"Render Props Pattern",id:"render-props-pattern",level:3},{value:"Compound Components",id:"compound-components",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Memoization",id:"memoization",level:3},{value:"Lazy Loading",id:"lazy-loading",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Keep Components Pure",id:"1-keep-components-pure",level:3},{value:"2. Use Descriptive Names",id:"2-use-descriptive-names",level:3},{value:"3. Extract Complex Logic",id:"3-extract-complex-logic",level:3},{value:"4. Handle Edge Cases",id:"4-handle-edge-cases",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"components",children:"Components"})}),"\n",(0,a.jsxs)(n.p,{children:["Components are the building blocks of Refract applications. They are pure functions that describe what the UI should look like based on the current state. Unlike traditional frameworks, Refract components are created using the ",(0,a.jsx)(n.code,{children:"createComponent()"})," function and receive reactive capabilities through the lens system."]}),"\n",(0,a.jsx)(n.h2,{id:"creating-components",children:"Creating Components"}),"\n",(0,a.jsx)(n.h3,{id:"basic-component-structure",children:"Basic Component Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { createComponent } from 'refract';\n\nconst MyComponent = createComponent(({ lens, ...props }) => {\n  // Component logic here\n  \n  return (\n    <div>\n      <h1>Hello, Refract!</h1>\n    </div>\n  );\n});\n\nexport default MyComponent;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"component-with-props",children:"Component with Props"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const Greeting = createComponent(({ lens, name, age }) => {\n  return (\n    <div className="greeting">\n      <h2>Hello, {name}!</h2>\n      <p>You are {age} years old.</p>\n    </div>\n  );\n});\n\n// Usage\n<Greeting name="Alice" age={25} />\n'})}),"\n",(0,a.jsx)(n.h2,{id:"component-lifecycle",children:"Component Lifecycle"}),"\n",(0,a.jsx)(n.p,{children:"Refract components have a simplified lifecycle compared to class-based components:"}),"\n",(0,a.jsx)(n.h3,{id:"mount-phase",children:"Mount Phase"}),"\n",(0,a.jsx)(n.p,{children:"When a component is first created and added to the DOM:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const LifecycleExample = createComponent(({ lens }) => {\n  const data = lens.useRefraction(null);\n  \n  // Runs once when component mounts\n  lens.useEffect(() => {\n    console.log('Component mounted');\n    fetchData().then(data.set);\n  }, []); // Empty dependency array = mount only\n  \n  return <div>{data.value ? 'Data loaded!' : 'Loading...'}</div>;\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"update-phase",children:"Update Phase"}),"\n",(0,a.jsx)(n.p,{children:"When props or state change:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const UpdateExample = createComponent(({ lens, userId }) => {\n  const user = lens.useRefraction(null);\n  \n  // Runs when userId prop changes\n  lens.useEffect(() => {\n    console.log('Fetching user:', userId);\n    fetchUser(userId).then(user.set);\n  }, [userId]); // Dependency array includes userId\n  \n  return <div>{user.value?.name || 'Loading user...'}</div>;\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"cleanup-phase",children:"Cleanup Phase"}),"\n",(0,a.jsx)(n.p,{children:"When a component is removed from the DOM:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const CleanupExample = createComponent(({ lens }) => {\n  lens.useEffect(() => {\n    const timer = setInterval(() => {\n      console.log('Timer tick');\n    }, 1000);\n    \n    // Cleanup function\n    return () => {\n      console.log('Component unmounting');\n      clearInterval(timer);\n    };\n  }, []);\n  \n  return <div>Timer running...</div>;\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"state-management-in-components",children:"State Management in Components"}),"\n",(0,a.jsx)(n.h3,{id:"local-state-with-refractions",children:"Local State with Refractions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const Counter = createComponent(({ lens }) => {\n  const count = lens.useRefraction(0);\n  const step = lens.useRefraction(1);\n  \n  const increment = () => count.set(count.value + step.value);\n  const decrement = () => count.set(count.value - step.value);\n  \n  return (\n    <div>\n      <h3>Count: {count.value}</h3>\n      <input \n        type="number" \n        value={step.value}\n        onChange={(e) => step.set(Number(e.target.value))}\n        placeholder="Step size"\n      />\n      <button onClick={decrement}>-{step.value}</button>\n      <button onClick={increment}>+{step.value}</button>\n    </div>\n  );\n});\n'})}),"\n",(0,a.jsx)(n.h3,{id:"computed-values",children:"Computed Values"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const ShoppingCart = createComponent(({ lens }) => {\n  const items = lens.useRefraction([\n    { id: 1, name: 'Apple', price: 1.50, quantity: 2 },\n    { id: 2, name: 'Banana', price: 0.75, quantity: 3 }\n  ]);\n  \n  // Computed value using useOptic\n  const total = lens.useOptic(() => {\n    return items.value.reduce((sum, item) => \n      sum + (item.price * item.quantity), 0\n    );\n  }, [items.value]);\n  \n  return (\n    <div>\n      <h3>Shopping Cart</h3>\n      {items.value.map(item => (\n        <div key={item.id}>\n          {item.name} - ${item.price} x {item.quantity}\n        </div>\n      ))}\n      <h4>Total: ${total.toFixed(2)}</h4>\n    </div>\n  );\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"component-composition",children:"Component Composition"}),"\n",(0,a.jsx)(n.h3,{id:"parent-child-communication",children:"Parent-Child Communication"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Child component\nconst TodoItem = createComponent(({ lens, todo, onToggle, onDelete }) => {\n  return (\n    <div className={`todo-item ${todo.completed ? 'completed' : ''}`}>\n      <input \n        type=\"checkbox\" \n        checked={todo.completed}\n        onChange={() => onToggle(todo.id)}\n      />\n      <span>{todo.text}</span>\n      <button onClick={() => onDelete(todo.id)}>Delete</button>\n    </div>\n  );\n});\n\n// Parent component\nconst TodoList = createComponent(({ lens }) => {\n  const todos = lens.useRefraction([\n    { id: 1, text: 'Learn Refract', completed: false },\n    { id: 2, text: 'Build an app', completed: false }\n  ]);\n  \n  const toggleTodo = (id) => {\n    todos.set(todos.value.map(todo => \n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n  \n  const deleteTodo = (id) => {\n    todos.set(todos.value.filter(todo => todo.id !== id));\n  };\n  \n  return (\n    <div>\n      <h2>Todo List</h2>\n      {todos.value.map(todo => (\n        <TodoItem \n          key={todo.id}\n          todo={todo}\n          onToggle={toggleTodo}\n          onDelete={deleteTodo}\n        />\n      ))}\n    </div>\n  );\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"higher-order-components-hocs",children:"Higher-Order Components (HOCs)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// HOC for adding loading state\nconst withLoading = (WrappedComponent) => {\n  return createComponent((props) => {\n    const { lens, isLoading, ...otherProps } = props;\n    \n    if (isLoading) {\n      return <div className="loading">Loading...</div>;\n    }\n    \n    return <WrappedComponent lens={lens} {...otherProps} />;\n  });\n};\n\n// Usage\nconst DataDisplay = createComponent(({ lens, data }) => {\n  return <div>{JSON.stringify(data)}</div>;\n});\n\nconst DataDisplayWithLoading = withLoading(DataDisplay);\n\n// In parent component\n<DataDisplayWithLoading \n  isLoading={!data.value} \n  data={data.value} \n/>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"component-patterns",children:"Component Patterns"}),"\n",(0,a.jsx)(n.h3,{id:"render-props-pattern",children:"Render Props Pattern"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const DataFetcher = createComponent(({ lens, url, children }) => {\n  const data = lens.useRefraction(null);\n  const loading = lens.useRefraction(true);\n  const error = lens.useRefraction(null);\n  \n  lens.useEffect(() => {\n    loading.set(true);\n    fetch(url)\n      .then(response => response.json())\n      .then(result => {\n        data.set(result);\n        loading.set(false);\n      })\n      .catch(err => {\n        error.set(err);\n        loading.set(false);\n      });\n  }, [url]);\n  \n  return children({\n    data: data.value,\n    loading: loading.value,\n    error: error.value\n  });\n});\n\n// Usage\n<DataFetcher url="/api/users">\n  {({ data, loading, error }) => {\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error: {error.message}</div>;\n    return <UserList users={data} />;\n  }}\n</DataFetcher>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"compound-components",children:"Compound Components"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const Tabs = createComponent(({ lens, children, defaultTab = 0 }) => {\n  const activeTab = lens.useRefraction(defaultTab);\n  \n  return (\n    <div className="tabs">\n      {children.map((child, index) => \n        React.cloneElement(child, { \n          isActive: index === activeTab.value,\n          onActivate: () => activeTab.set(index)\n        })\n      )}\n    </div>\n  );\n});\n\nconst Tab = createComponent(({ lens, title, children, isActive, onActivate }) => {\n  return (\n    <div className="tab">\n      <button \n        className={`tab-header ${isActive ? \'active\' : \'\'}`}\n        onClick={onActivate}\n      >\n        {title}\n      </button>\n      {isActive && (\n        <div className="tab-content">\n          {children}\n        </div>\n      )}\n    </div>\n  );\n});\n\n// Usage\n<Tabs defaultTab={0}>\n  <Tab title="Profile">\n    <UserProfile />\n  </Tab>\n  <Tab title="Settings">\n    <UserSettings />\n  </Tab>\n</Tabs>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,a.jsx)(n.h3,{id:"memoization",children:"Memoization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { memo } from 'refract';\n\nconst ExpensiveComponent = memo(createComponent(({ lens, data }) => {\n  // Expensive computation\n  const processedData = lens.useOptic(() => {\n    return data.map(item => ({\n      ...item,\n      processed: heavyComputation(item)\n    }));\n  }, [data]);\n  \n  return (\n    <div>\n      {processedData.map(item => (\n        <div key={item.id}>{item.processed}</div>\n      ))}\n    </div>\n  );\n}));\n"})}),"\n",(0,a.jsx)(n.h3,{id:"lazy-loading",children:"Lazy Loading"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { lazy, Suspense } from 'refract';\n\nconst LazyComponent = lazy(() => import('./HeavyComponent'));\n\nconst App = createComponent(({ lens }) => {\n  return (\n    <div>\n      <h1>My App</h1>\n      <Suspense fallback={<div>Loading heavy component...</div>}>\n        <LazyComponent />\n      </Suspense>\n    </div>\n  );\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(n.h3,{id:"1-keep-components-pure",children:"1. Keep Components Pure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Pure component\nconst PureComponent = createComponent(({ lens, name }) => {\n  return <h1>Hello, {name}!</h1>;\n});\n\n// \u274c Bad - Side effects in render\nconst ImpureComponent = createComponent(({ lens, name }) => {\n  console.log('Rendering...'); // Side effect!\n  localStorage.setItem('name', name); // Side effect!\n  return <h1>Hello, {name}!</h1>;\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-use-descriptive-names",children:"2. Use Descriptive Names"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good\nconst UserProfileCard = createComponent(({ lens, user }) => {\n  // ...\n});\n\n// \u274c Bad\nconst Component1 = createComponent(({ lens, data }) => {\n  // ...\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-extract-complex-logic",children:"3. Extract Complex Logic"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Logic extracted to custom optic\nconst useUserData = (userId) => {\n  const user = useRefraction(null);\n  const loading = useRefraction(true);\n  \n  useEffect(() => {\n    fetchUser(userId).then(user.set).finally(() => loading.set(false));\n  }, [userId]);\n  \n  return { user: user.value, loading: loading.value };\n};\n\nconst UserProfile = createComponent(({ lens, userId }) => {\n  const { user, loading } = lens.useOptic(() => useUserData(userId), [userId]);\n  \n  if (loading) return <div>Loading...</div>;\n  return <div>{user.name}</div>;\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"4-handle-edge-cases",children:"4. Handle Edge Cases"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const SafeComponent = createComponent(({ lens, items = [] }) => {\n  if (!items.length) {\n    return <div>No items to display</div>;\n  }\n  \n  return (\n    <ul>\n      {items.map(item => (\n        <li key={item.id || item.name}>\n          {item.name || 'Unnamed item'}\n        </li>\n      ))}\n    </ul>\n  );\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsx)(n.p,{children:"Now that you understand components, learn about:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"./refractions",children:"Refractions"})})," - Reactive state management"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"./lenses",children:"Lenses"})})," - Scoped access to reactive features"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"./optics",children:"Optics"})})," - Reusable logic patterns"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);