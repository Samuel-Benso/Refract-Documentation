"use strict";(self.webpackChunkrefract_docs=self.webpackChunkrefract_docs||[]).push([[40],{8227:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>d,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"tutorials/todo-list","title":"Building a Todo List App","description":"In this tutorial, you\'ll create a fully-featured todo list application using Refract. This project will teach you advanced state management, form handling, data persistence, and component composition patterns.","source":"@site/docs/tutorials/todo-list.md","sourceDirName":"tutorials","slug":"/tutorials/todo-list","permalink":"/docs/tutorials/todo-list","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/tutorials/todo-list.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Building a Counter App","permalink":"/docs/tutorials/counter-app"},"next":{"title":"Global Theme Management","permalink":"/docs/tutorials/global-theme"}}');var a=t(4848),r=t(8453);const d={},s="Building a Todo List App",i={},l=[{value:"What You&#39;ll Build",id:"what-youll-build",level:2},{value:"Project Setup",id:"project-setup",level:2},{value:"Step 1: Basic Todo Structure",id:"step-1-basic-todo-structure",level:2},{value:"Create the Todo Model",id:"create-the-todo-model",level:3},{value:"Create Todo Item Component",id:"create-todo-item-component",level:3},{value:"Step 2: Todo List Container",id:"step-2-todo-list-container",level:2},{value:"Step 3: Styling",id:"step-3-styling",level:2},{value:"Step 4: Advanced Features",id:"step-4-advanced-features",level:2},{value:"Add Drag and Drop",id:"add-drag-and-drop",level:3},{value:"Add Categories Management",id:"add-categories-management",level:3},{value:"Step 5: Final Integration",id:"step-5-final-integration",level:2},{value:"What You&#39;ve Learned",id:"what-youve-learned",level:2},{value:"Advanced State Management",id:"advanced-state-management",level:3},{value:"Component Patterns",id:"component-patterns",level:3},{value:"User Experience",id:"user-experience",level:3},{value:"Data Modeling",id:"data-modeling",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"building-a-todo-list-app",children:"Building a Todo List App"})}),"\n",(0,a.jsx)(n.p,{children:"In this tutorial, you'll create a fully-featured todo list application using Refract. This project will teach you advanced state management, form handling, data persistence, and component composition patterns."}),"\n",(0,a.jsx)(n.h2,{id:"what-youll-build",children:"What You'll Build"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Add, edit, and delete todos"}),"\n",(0,a.jsx)(n.li,{children:"Mark todos as complete/incomplete"}),"\n",(0,a.jsx)(n.li,{children:"Filter todos by status (all, active, completed)"}),"\n",(0,a.jsx)(n.li,{children:"Persist data to localStorage"}),"\n",(0,a.jsx)(n.li,{children:"Drag and drop reordering"}),"\n",(0,a.jsx)(n.li,{children:"Bulk operations (mark all, clear completed)"}),"\n",(0,a.jsx)(n.li,{children:"Search and categorization"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"project-setup",children:"Project Setup"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx create-refract-app todo-app\ncd todo-app\nnpm start\n"})}),"\n",(0,a.jsx)(n.h2,{id:"step-1-basic-todo-structure",children:"Step 1: Basic Todo Structure"}),"\n",(0,a.jsx)(n.h3,{id:"create-the-todo-model",children:"Create the Todo Model"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// src/models/Todo.js\nexport class Todo {\n  constructor(text, category = 'general') {\n    this.id = Date.now() + Math.random();\n    this.text = text;\n    this.completed = false;\n    this.category = category;\n    this.createdAt = new Date();\n    this.updatedAt = new Date();\n  }\n  \n  toggle() {\n    this.completed = !this.completed;\n    this.updatedAt = new Date();\n    return this;\n  }\n  \n  update(text) {\n    this.text = text;\n    this.updatedAt = new Date();\n    return this;\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"create-todo-item-component",children:"Create Todo Item Component"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// src/components/TodoItem.js\nimport { createComponent } from \'refract\';\n\nconst TodoItem = createComponent(({ lens, todo, onToggle, onDelete, onEdit }) => {\n  const isEditing = lens.useRefraction(false);\n  const editText = lens.useRefraction(todo.text);\n  \n  const handleEdit = () => {\n    if (isEditing.value) {\n      onEdit(todo.id, editText.value);\n      isEditing.set(false);\n    } else {\n      editText.set(todo.text);\n      isEditing.set(true);\n    }\n  };\n  \n  const handleKeyPress = (e) => {\n    if (e.key === \'Enter\') {\n      handleEdit();\n    } else if (e.key === \'Escape\') {\n      editText.set(todo.text);\n      isEditing.set(false);\n    }\n  };\n  \n  return (\n    <div className={`todo-item ${todo.completed ? \'completed\' : \'\'}`}>\n      <div className="todo-content">\n        <input\n          type="checkbox"\n          checked={todo.completed}\n          onChange={() => onToggle(todo.id)}\n          className="todo-checkbox"\n        />\n        \n        {isEditing.value ? (\n          <input\n            type="text"\n            value={editText.value}\n            onChange={(e) => editText.set(e.target.value)}\n            onKeyPress={handleKeyPress}\n            onBlur={handleEdit}\n            className="todo-edit-input"\n            autoFocus\n          />\n        ) : (\n          <span \n            className="todo-text"\n            onDoubleClick={() => isEditing.set(true)}\n          >\n            {todo.text}\n          </span>\n        )}\n        \n        <span className="todo-category">{todo.category}</span>\n      </div>\n      \n      <div className="todo-actions">\n        <button\n          onClick={handleEdit}\n          className="btn btn-edit"\n          title={isEditing.value ? \'Save\' : \'Edit\'}\n        >\n          {isEditing.value ? \'\u2713\' : \'\u270f\ufe0f\'}\n        </button>\n        <button\n          onClick={() => onDelete(todo.id)}\n          className="btn btn-delete"\n          title="Delete"\n        >\n          \ud83d\uddd1\ufe0f\n        </button>\n      </div>\n    </div>\n  );\n});\n\nexport default TodoItem;\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-2-todo-list-container",children:"Step 2: Todo List Container"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// src/components/TodoList.js\nimport { createComponent } from 'refract';\nimport { Todo } from '../models/Todo';\nimport TodoItem from './TodoItem';\n\nconst TodoList = createComponent(({ lens }) => {\n  // Load todos from localStorage\n  const loadTodos = () => {\n    try {\n      const stored = localStorage.getItem('todos');\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.warn('Failed to load todos:', error);\n      return [];\n    }\n  };\n  \n  const todos = lens.useRefraction(loadTodos());\n  const filter = lens.useRefraction('all'); // all, active, completed\n  const searchTerm = lens.useRefraction('');\n  const newTodoText = lens.useRefraction('');\n  const selectedCategory = lens.useRefraction('general');\n  \n  // Save todos to localStorage whenever they change\n  lens.useEffect(() => {\n    try {\n      localStorage.setItem('todos', JSON.stringify(todos.value));\n    } catch (error) {\n      console.warn('Failed to save todos:', error);\n    }\n  }, [todos.value]);\n  \n  // Filtered todos based on current filter and search\n  const filteredTodos = lens.useDerived(() => {\n    let filtered = todos.value;\n    \n    // Apply status filter\n    if (filter.value === 'active') {\n      filtered = filtered.filter(todo => !todo.completed);\n    } else if (filter.value === 'completed') {\n      filtered = filtered.filter(todo => todo.completed);\n    }\n    \n    // Apply search filter\n    if (searchTerm.value) {\n      const search = searchTerm.value.toLowerCase();\n      filtered = filtered.filter(todo => \n        todo.text.toLowerCase().includes(search) ||\n        todo.category.toLowerCase().includes(search)\n      );\n    }\n    \n    return filtered;\n  }, [todos.value, filter.value, searchTerm.value]);\n  \n  // Statistics\n  const stats = lens.useDerived(() => {\n    const total = todos.value.length;\n    const completed = todos.value.filter(todo => todo.completed).length;\n    const active = total - completed;\n    \n    return { total, completed, active };\n  }, [todos.value]);\n  \n  const addTodo = () => {\n    if (!newTodoText.value.trim()) return;\n    \n    const newTodo = new Todo(newTodoText.value.trim(), selectedCategory.value);\n    todos.set(prev => [...prev, newTodo]);\n    newTodoText.set('');\n  };\n  \n  const toggleTodo = (id) => {\n    todos.set(prev => prev.map(todo => \n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n  \n  const deleteTodo = (id) => {\n    todos.set(prev => prev.filter(todo => todo.id !== id));\n  };\n  \n  const editTodo = (id, newText) => {\n    if (!newText.trim()) return;\n    \n    todos.set(prev => prev.map(todo => \n      todo.id === id ? { ...todo, text: newText.trim() } : todo\n    ));\n  };\n  \n  const toggleAll = () => {\n    const allCompleted = todos.value.every(todo => todo.completed);\n    todos.set(prev => prev.map(todo => ({ \n      ...todo, \n      completed: !allCompleted \n    })));\n  };\n  \n  const clearCompleted = () => {\n    todos.set(prev => prev.filter(todo => !todo.completed));\n  };\n  \n  const categories = lens.useDerived(() => {\n    const cats = new Set(todos.value.map(todo => todo.category));\n    return ['general', ...Array.from(cats).filter(cat => cat !== 'general')];\n  }, [todos.value]);\n  \n  return (\n    <div className=\"todo-app\">\n      <header className=\"todo-header\">\n        <h1>Todo List</h1>\n        \n        <div className=\"todo-stats\">\n          <span>Total: {stats.value.total}</span>\n          <span>Active: {stats.value.active}</span>\n          <span>Completed: {stats.value.completed}</span>\n        </div>\n      </header>\n      \n      <div className=\"todo-controls\">\n        <div className=\"add-todo\">\n          <select\n            value={selectedCategory.value}\n            onChange={(e) => selectedCategory.set(e.target.value)}\n            className=\"category-select\"\n          >\n            {categories.value.map(category => (\n              <option key={category} value={category}>\n                {category}\n              </option>\n            ))}\n          </select>\n          \n          <input\n            type=\"text\"\n            value={newTodoText.value}\n            onChange={(e) => newTodoText.set(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && addTodo()}\n            placeholder=\"Add a new todo...\"\n            className=\"todo-input\"\n          />\n          \n          <button onClick={addTodo} className=\"btn btn-primary\">\n            Add\n          </button>\n        </div>\n        \n        <div className=\"search-filter\">\n          <input\n            type=\"text\"\n            value={searchTerm.value}\n            onChange={(e) => searchTerm.set(e.target.value)}\n            placeholder=\"Search todos...\"\n            className=\"search-input\"\n          />\n          \n          <div className=\"filter-buttons\">\n            {['all', 'active', 'completed'].map(filterType => (\n              <button\n                key={filterType}\n                onClick={() => filter.set(filterType)}\n                className={`btn ${filter.value === filterType ? 'btn-active' : 'btn-secondary'}`}\n              >\n                {filterType}\n              </button>\n            ))}\n          </div>\n        </div>\n        \n        <div className=\"bulk-actions\">\n          <button onClick={toggleAll} className=\"btn btn-outline\">\n            Toggle All\n          </button>\n          <button onClick={clearCompleted} className=\"btn btn-danger\">\n            Clear Completed\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"todo-list\">\n        {filteredTodos.value.length === 0 ? (\n          <div className=\"empty-state\">\n            {searchTerm.value ? 'No todos match your search' : 'No todos yet'}\n          </div>\n        ) : (\n          filteredTodos.value.map(todo => (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              onToggle={toggleTodo}\n              onDelete={deleteTodo}\n              onEdit={editTodo}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n});\n\nexport default TodoList;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"step-3-styling",children:"Step 3: Styling"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:"/* src/styles/TodoList.css */\n.todo-app {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.todo-header {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.todo-header h1 {\n  color: #2d3748;\n  margin: 0 0 1rem 0;\n  font-size: 2.5rem;\n}\n\n.todo-stats {\n  display: flex;\n  justify-content: center;\n  gap: 2rem;\n  color: #718096;\n  font-size: 0.9rem;\n}\n\n.todo-controls {\n  margin-bottom: 2rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.add-todo {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.category-select {\n  padding: 0.75rem;\n  border: 2px solid #e2e8f0;\n  border-radius: 6px;\n  background: white;\n  min-width: 120px;\n}\n\n.todo-input {\n  flex: 1;\n  padding: 0.75rem;\n  border: 2px solid #e2e8f0;\n  border-radius: 6px;\n  font-size: 1rem;\n}\n\n.todo-input:focus {\n  outline: none;\n  border-color: #4299e1;\n  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);\n}\n\n.search-filter {\n  display: flex;\n  gap: 1rem;\n  align-items: center;\n}\n\n.search-input {\n  flex: 1;\n  padding: 0.5rem;\n  border: 2px solid #e2e8f0;\n  border-radius: 6px;\n}\n\n.filter-buttons {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.bulk-actions {\n  display: flex;\n  gap: 0.5rem;\n  justify-content: center;\n}\n\n.btn {\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 6px;\n  font-size: 0.9rem;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.btn-primary {\n  background: #4299e1;\n  color: white;\n}\n\n.btn-primary:hover {\n  background: #3182ce;\n}\n\n.btn-secondary {\n  background: #e2e8f0;\n  color: #4a5568;\n}\n\n.btn-active {\n  background: #4299e1;\n  color: white;\n}\n\n.btn-outline {\n  background: transparent;\n  color: #4a5568;\n  border: 2px solid #e2e8f0;\n}\n\n.btn-danger {\n  background: #f56565;\n  color: white;\n}\n\n.btn-danger:hover {\n  background: #e53e3e;\n}\n\n.todo-list {\n  min-height: 200px;\n}\n\n.todo-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 1rem;\n  border: 1px solid #e2e8f0;\n  border-radius: 6px;\n  margin-bottom: 0.5rem;\n  background: #f7fafc;\n  transition: all 0.2s ease;\n}\n\n.todo-item:hover {\n  background: #edf2f7;\n  border-color: #cbd5e0;\n}\n\n.todo-item.completed {\n  opacity: 0.6;\n  background: #f0fff4;\n}\n\n.todo-content {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  flex: 1;\n}\n\n.todo-checkbox {\n  width: 20px;\n  height: 20px;\n  cursor: pointer;\n}\n\n.todo-text {\n  flex: 1;\n  cursor: pointer;\n}\n\n.todo-item.completed .todo-text {\n  text-decoration: line-through;\n}\n\n.todo-category {\n  background: #e2e8f0;\n  color: #4a5568;\n  padding: 0.25rem 0.5rem;\n  border-radius: 12px;\n  font-size: 0.75rem;\n  font-weight: 600;\n}\n\n.todo-edit-input {\n  flex: 1;\n  padding: 0.5rem;\n  border: 2px solid #4299e1;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.todo-actions {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.btn-edit, .btn-delete {\n  background: transparent;\n  border: none;\n  padding: 0.5rem;\n  cursor: pointer;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.btn-edit:hover {\n  background: #e2e8f0;\n}\n\n.btn-delete:hover {\n  background: #fed7d7;\n}\n\n.empty-state {\n  text-align: center;\n  color: #718096;\n  font-style: italic;\n  padding: 3rem;\n}\n\n@media (max-width: 768px) {\n  .todo-app {\n    margin: 1rem;\n    padding: 1rem;\n  }\n  \n  .add-todo {\n    flex-direction: column;\n  }\n  \n  .search-filter {\n    flex-direction: column;\n    align-items: stretch;\n  }\n  \n  .todo-stats {\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n  \n  .bulk-actions {\n    flex-direction: column;\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"step-4-advanced-features",children:"Step 4: Advanced Features"}),"\n",(0,a.jsx)(n.h3,{id:"add-drag-and-drop",children:"Add Drag and Drop"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// src/components/DraggableTodoItem.js\nimport { createComponent } from 'refract';\nimport TodoItem from './TodoItem';\n\nconst DraggableTodoItem = createComponent(({ lens, todo, index, onToggle, onDelete, onEdit, onReorder }) => {\n  const isDragging = lens.useRefraction(false);\n  \n  const handleDragStart = (e) => {\n    isDragging.set(true);\n    e.dataTransfer.setData('text/plain', index.toString());\n    e.dataTransfer.effectAllowed = 'move';\n  };\n  \n  const handleDragEnd = () => {\n    isDragging.set(false);\n  };\n  \n  const handleDragOver = (e) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n  \n  const handleDrop = (e) => {\n    e.preventDefault();\n    const draggedIndex = parseInt(e.dataTransfer.getData('text/plain'));\n    if (draggedIndex !== index) {\n      onReorder(draggedIndex, index);\n    }\n  };\n  \n  return (\n    <div\n      draggable\n      onDragStart={handleDragStart}\n      onDragEnd={handleDragEnd}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      className={`draggable-todo ${isDragging.value ? 'dragging' : ''}`}\n    >\n      <TodoItem\n        todo={todo}\n        onToggle={onToggle}\n        onDelete={onDelete}\n        onEdit={onEdit}\n      />\n    </div>\n  );\n});\n\nexport default DraggableTodoItem;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"add-categories-management",children:"Add Categories Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// src/components/CategoryManager.js\nimport { createComponent } from \'refract\';\n\nconst CategoryManager = createComponent(({ lens, categories, onAddCategory, onDeleteCategory }) => {\n  const newCategory = lens.useRefraction(\'\');\n  const isOpen = lens.useRefraction(false);\n  \n  const addCategory = () => {\n    if (newCategory.value.trim() && !categories.includes(newCategory.value)) {\n      onAddCategory(newCategory.value.trim());\n      newCategory.set(\'\');\n    }\n  };\n  \n  return (\n    <div className="category-manager">\n      <button \n        onClick={() => isOpen.set(!isOpen.value)}\n        className="btn btn-outline"\n      >\n        Manage Categories\n      </button>\n      \n      {isOpen.value && (\n        <div className="category-panel">\n          <div className="add-category">\n            <input\n              type="text"\n              value={newCategory.value}\n              onChange={(e) => newCategory.set(e.target.value)}\n              onKeyPress={(e) => e.key === \'Enter\' && addCategory()}\n              placeholder="New category name"\n              className="category-input"\n            />\n            <button onClick={addCategory} className="btn btn-primary">\n              Add\n            </button>\n          </div>\n          \n          <div className="category-list">\n            {categories.filter(cat => cat !== \'general\').map(category => (\n              <div key={category} className="category-item">\n                <span>{category}</span>\n                <button\n                  onClick={() => onDeleteCategory(category)}\n                  className="btn btn-delete"\n                >\n                  \xd7\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n\nexport default CategoryManager;\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-5-final-integration",children:"Step 5: Final Integration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// src/App.js\nimport { createComponent } from 'refract';\nimport TodoList from './components/TodoList';\nimport './styles/TodoList.css';\n\nconst App = createComponent(({ lens }) => {\n  return (\n    <div className=\"app\">\n      <TodoList />\n    </div>\n  );\n});\n\nexport default App;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"what-youve-learned",children:"What You've Learned"}),"\n",(0,a.jsx)(n.p,{children:"This tutorial covered:"}),"\n",(0,a.jsx)(n.h3,{id:"advanced-state-management",children:"Advanced State Management"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Complex state with multiple related values"}),"\n",(0,a.jsx)(n.li,{children:"Derived state for filtering and statistics"}),"\n",(0,a.jsx)(n.li,{children:"State persistence with localStorage"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"component-patterns",children:"Component Patterns"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Container/Presentational component separation"}),"\n",(0,a.jsx)(n.li,{children:"Prop drilling and callback patterns"}),"\n",(0,a.jsx)(n.li,{children:"Conditional rendering and dynamic lists"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"user-experience",children:"User Experience"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Real-time search and filtering"}),"\n",(0,a.jsx)(n.li,{children:"Inline editing with keyboard shortcuts"}),"\n",(0,a.jsx)(n.li,{children:"Bulk operations and batch updates"}),"\n",(0,a.jsx)(n.li,{children:"Responsive design principles"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"data-modeling",children:"Data Modeling"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Object-oriented todo model"}),"\n",(0,a.jsx)(n.li,{children:"Category management"}),"\n",(0,a.jsx)(n.li,{children:"Timestamp tracking"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsx)(n.p,{children:"Enhance your todo app with:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Due Dates"}),": Add date picker and sorting by due date"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Priority Levels"}),": High, medium, low priority with visual indicators"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Subtasks"}),": Nested todo items with progress tracking"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Tags"}),": Multiple tags per todo with tag-based filtering"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Export/Import"}),": JSON/CSV export and import functionality"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Collaboration"}),": Real-time sync with other users"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Offline Support"}),": Service worker for offline functionality"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"../concepts/refractions",children:"Refract State Management Guide"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"../concepts/components",children:"Component Composition Patterns"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"../advanced/performance",children:"Performance Optimization"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>s});var o=t(6540);const a={},r=o.createContext(a);function d(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);