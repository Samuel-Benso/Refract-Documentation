"use strict";(self.webpackChunkrefract_docs=self.webpackChunkrefract_docs||[]).push([[2771],{1847:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"tutorials/counter-app","title":"Building a Counter App","description":"In this tutorial, you\'ll build a complete counter application using Refract. This hands-on guide will teach you the fundamentals of Refract development, including state management, effects, and component composition.","source":"@site/docs/tutorials/counter-app.md","sourceDirName":"tutorials","slug":"/tutorials/counter-app","permalink":"/docs/tutorials/counter-app","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/tutorials/counter-app.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"useFlash","permalink":"/docs/api/useFlash"},"next":{"title":"Building a Todo List App","permalink":"/docs/tutorials/todo-list"}}');var a=t(4848),s=t(8453);const o={},i="Building a Counter App",c={},l=[{value:"What You&#39;ll Build",id:"what-youll-build",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Setup",id:"project-setup",level:2},{value:"1. Create a New Project",id:"1-create-a-new-project",level:3},{value:"2. Project Structure",id:"2-project-structure",level:3},{value:"Step 1: Basic Counter Component",id:"step-1-basic-counter-component",level:2},{value:"Create the Counter Component",id:"create-the-counter-component",level:3},{value:"Add Basic Styling",id:"add-basic-styling",level:3},{value:"Update App Component",id:"update-app-component",level:3},{value:"Add App Styling",id:"add-app-styling",level:3},{value:"Step 2: Enhanced Counter with Step Size",id:"step-2-enhanced-counter-with-step-size",level:2},{value:"Add Enhanced Styling",id:"add-enhanced-styling",level:3},{value:"Step 3: Persistent Counter with localStorage",id:"step-3-persistent-counter-with-localstorage",level:2},{value:"Add Persistent Counter Styling",id:"add-persistent-counter-styling",level:3},{value:"Step 4: Animated Counter",id:"step-4-animated-counter",level:2},{value:"Add Animation Styling",id:"add-animation-styling",level:3},{value:"Step 5: Multiple Counter Manager",id:"step-5-multiple-counter-manager",level:2},{value:"Add Manager Styling",id:"add-manager-styling",level:3},{value:"Step 6: Final App Integration",id:"step-6-final-app-integration",level:2},{value:"Final App Styling",id:"final-app-styling",level:3},{value:"What You&#39;ve Learned",id:"what-youve-learned",level:2},{value:"Core Concepts",id:"core-concepts",level:3},{value:"Advanced Patterns",id:"advanced-patterns",level:3},{value:"Best Practices",id:"best-practices",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"building-a-counter-app",children:"Building a Counter App"})}),"\n",(0,a.jsx)(e.p,{children:"In this tutorial, you'll build a complete counter application using Refract. This hands-on guide will teach you the fundamentals of Refract development, including state management, effects, and component composition."}),"\n",(0,a.jsx)(e.h2,{id:"what-youll-build",children:"What You'll Build"}),"\n",(0,a.jsx)(e.p,{children:"By the end of this tutorial, you'll have created:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"A counter with increment/decrement functionality"}),"\n",(0,a.jsx)(e.li,{children:"Step size customization"}),"\n",(0,a.jsx)(e.li,{children:"Reset functionality"}),"\n",(0,a.jsx)(e.li,{children:"Persistence using localStorage"}),"\n",(0,a.jsx)(e.li,{children:"Animation effects"}),"\n",(0,a.jsx)(e.li,{children:"Multiple counter instances"}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Basic knowledge of JavaScript and React concepts"}),"\n",(0,a.jsx)(e.li,{children:"Node.js installed on your system"}),"\n",(0,a.jsx)(e.li,{children:"A code editor (VS Code recommended)"}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"project-setup",children:"Project Setup"}),"\n",(0,a.jsx)(e.h3,{id:"1-create-a-new-project",children:"1. Create a New Project"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"npx create-refract-app counter-tutorial\ncd counter-tutorial\nnpm start\n"})}),"\n",(0,a.jsx)(e.h3,{id:"2-project-structure",children:"2. Project Structure"}),"\n",(0,a.jsx)(e.p,{children:"Your project should have this structure:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"counter-tutorial/\n\u251c\u2500\u2500 public/\n\u2502   \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 styles/\n\u2502   \u251c\u2500\u2500 App.js\n\u2502   \u2514\u2500\u2500 index.js\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 README.md\n"})}),"\n",(0,a.jsx)(e.h2,{id:"step-1-basic-counter-component",children:"Step 1: Basic Counter Component"}),"\n",(0,a.jsx)(e.p,{children:"Let's start with a simple counter component."}),"\n",(0,a.jsx)(e.h3,{id:"create-the-counter-component",children:"Create the Counter Component"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'// src/components/Counter.js\nimport { createComponent } from \'refract\';\n\nconst Counter = createComponent(({ lens, initialValue = 0 }) => {\n  const count = lens.useRefraction(initialValue);\n  \n  const increment = () => count.set(count.value + 1);\n  const decrement = () => count.set(count.value - 1);\n  const reset = () => count.set(initialValue);\n  \n  return (\n    <div className="counter">\n      <h2>Counter</h2>\n      <div className="counter-display">\n        <span className="count-value">{count.value}</span>\n      </div>\n      <div className="counter-controls">\n        <button onClick={decrement} className="btn btn-secondary">\n          -\n        </button>\n        <button onClick={reset} className="btn btn-outline">\n          Reset\n        </button>\n        <button onClick={increment} className="btn btn-primary">\n          +\n        </button>\n      </div>\n    </div>\n  );\n});\n\nexport default Counter;\n'})}),"\n",(0,a.jsx)(e.h3,{id:"add-basic-styling",children:"Add Basic Styling"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-css",children:"/* src/styles/Counter.css */\n.counter {\n  max-width: 300px;\n  margin: 2rem auto;\n  padding: 2rem;\n  border: 2px solid #e1e5e9;\n  border-radius: 12px;\n  text-align: center;\n  background: white;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.counter h2 {\n  margin: 0 0 1.5rem 0;\n  color: #2d3748;\n  font-size: 1.5rem;\n}\n\n.counter-display {\n  margin: 2rem 0;\n}\n\n.count-value {\n  font-size: 3rem;\n  font-weight: bold;\n  color: #4a5568;\n  font-family: 'Courier New', monospace;\n}\n\n.counter-controls {\n  display: flex;\n  gap: 1rem;\n  justify-content: center;\n}\n\n.btn {\n  padding: 0.75rem 1.5rem;\n  border: none;\n  border-radius: 6px;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  min-width: 60px;\n}\n\n.btn-primary {\n  background: #4299e1;\n  color: white;\n}\n\n.btn-primary:hover {\n  background: #3182ce;\n  transform: translateY(-1px);\n}\n\n.btn-secondary {\n  background: #e2e8f0;\n  color: #4a5568;\n}\n\n.btn-secondary:hover {\n  background: #cbd5e0;\n  transform: translateY(-1px);\n}\n\n.btn-outline {\n  background: transparent;\n  color: #4a5568;\n  border: 2px solid #e2e8f0;\n}\n\n.btn-outline:hover {\n  background: #f7fafc;\n  border-color: #cbd5e0;\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"update-app-component",children:"Update App Component"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"// src/App.js\nimport { createComponent } from 'refract';\nimport Counter from './components/Counter';\nimport './styles/Counter.css';\n\nconst App = createComponent(({ lens }) => {\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1>Refract Counter Tutorial</h1>\n        <p>Learn Refract by building a counter app</p>\n      </header>\n      \n      <main>\n        <Counter initialValue={0} />\n      </main>\n    </div>\n  );\n});\n\nexport default App;\n"})}),"\n",(0,a.jsx)(e.h3,{id:"add-app-styling",children:"Add App Styling"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-css",children:"/* src/styles/App.css */\n.app {\n  min-height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  padding: 2rem;\n}\n\n.app-header {\n  text-align: center;\n  color: white;\n  margin-bottom: 3rem;\n}\n\n.app-header h1 {\n  font-size: 2.5rem;\n  margin: 0 0 0.5rem 0;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n}\n\n.app-header p {\n  font-size: 1.2rem;\n  opacity: 0.9;\n  margin: 0;\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"step-2-enhanced-counter-with-step-size",children:"Step 2: Enhanced Counter with Step Size"}),"\n",(0,a.jsx)(e.p,{children:"Let's add the ability to customize the step size."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'// src/components/EnhancedCounter.js\nimport { createComponent } from \'refract\';\n\nconst EnhancedCounter = createComponent(({ lens, initialValue = 0, initialStep = 1 }) => {\n  const count = lens.useRefraction(initialValue);\n  const step = lens.useRefraction(initialStep);\n  \n  const increment = () => count.set(count.value + step.value);\n  const decrement = () => count.set(count.value - step.value);\n  const reset = () => count.set(initialValue);\n  \n  const handleStepChange = (e) => {\n    const newStep = parseInt(e.target.value) || 1;\n    step.set(newStep);\n  };\n  \n  return (\n    <div className="counter enhanced-counter">\n      <h2>Enhanced Counter</h2>\n      \n      <div className="step-control">\n        <label htmlFor="step-input">Step Size:</label>\n        <input\n          id="step-input"\n          type="number"\n          value={step.value}\n          onChange={handleStepChange}\n          min="1"\n          max="100"\n          className="step-input"\n        />\n      </div>\n      \n      <div className="counter-display">\n        <span className="count-value">{count.value}</span>\n      </div>\n      \n      <div className="counter-controls">\n        <button onClick={decrement} className="btn btn-secondary">\n          -{step.value}\n        </button>\n        <button onClick={reset} className="btn btn-outline">\n          Reset\n        </button>\n        <button onClick={increment} className="btn btn-primary">\n          +{step.value}\n        </button>\n      </div>\n    </div>\n  );\n});\n\nexport default EnhancedCounter;\n'})}),"\n",(0,a.jsx)(e.h3,{id:"add-enhanced-styling",children:"Add Enhanced Styling"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-css",children:"/* Add to src/styles/Counter.css */\n.enhanced-counter {\n  max-width: 350px;\n}\n\n.step-control {\n  margin-bottom: 1.5rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n}\n\n.step-control label {\n  font-weight: 600;\n  color: #4a5568;\n}\n\n.step-input {\n  width: 80px;\n  padding: 0.5rem;\n  border: 2px solid #e2e8f0;\n  border-radius: 4px;\n  text-align: center;\n  font-size: 1rem;\n}\n\n.step-input:focus {\n  outline: none;\n  border-color: #4299e1;\n  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"step-3-persistent-counter-with-localstorage",children:"Step 3: Persistent Counter with localStorage"}),"\n",(0,a.jsx)(e.p,{children:"Add persistence so the counter value survives page refreshes."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'// src/components/PersistentCounter.js\nimport { createComponent } from \'refract\';\n\nconst PersistentCounter = createComponent(({ lens, storageKey = \'counter\' }) => {\n  // Initialize from localStorage or default to 0\n  const getStoredValue = () => {\n    try {\n      const stored = localStorage.getItem(storageKey);\n      return stored ? parseInt(stored) : 0;\n    } catch (error) {\n      console.warn(\'Failed to read from localStorage:\', error);\n      return 0;\n    }\n  };\n  \n  const count = lens.useRefraction(getStoredValue());\n  const step = lens.useRefraction(1);\n  \n  // Save to localStorage whenever count changes\n  lens.useEffect(() => {\n    try {\n      localStorage.setItem(storageKey, count.value.toString());\n    } catch (error) {\n      console.warn(\'Failed to save to localStorage:\', error);\n    }\n  }, [count.value, storageKey]);\n  \n  const increment = () => count.set(count.value + step.value);\n  const decrement = () => count.set(count.value - step.value);\n  const reset = () => count.set(0);\n  \n  const clearStorage = () => {\n    try {\n      localStorage.removeItem(storageKey);\n      count.set(0);\n    } catch (error) {\n      console.warn(\'Failed to clear localStorage:\', error);\n    }\n  };\n  \n  return (\n    <div className="counter persistent-counter">\n      <h2>Persistent Counter</h2>\n      <p className="storage-info">\n        Saved as: <code>{storageKey}</code>\n      </p>\n      \n      <div className="step-control">\n        <label htmlFor="step-input">Step Size:</label>\n        <input\n          id="step-input"\n          type="number"\n          value={step.value}\n          onChange={(e) => step.set(parseInt(e.target.value) || 1)}\n          min="1"\n          max="100"\n          className="step-input"\n        />\n      </div>\n      \n      <div className="counter-display">\n        <span className="count-value">{count.value}</span>\n      </div>\n      \n      <div className="counter-controls">\n        <button onClick={decrement} className="btn btn-secondary">\n          -{step.value}\n        </button>\n        <button onClick={reset} className="btn btn-outline">\n          Reset\n        </button>\n        <button onClick={increment} className="btn btn-primary">\n          +{step.value}\n        </button>\n      </div>\n      \n      <div className="storage-controls">\n        <button onClick={clearStorage} className="btn btn-danger">\n          Clear Storage\n        </button>\n      </div>\n    </div>\n  );\n});\n\nexport default PersistentCounter;\n'})}),"\n",(0,a.jsx)(e.h3,{id:"add-persistent-counter-styling",children:"Add Persistent Counter Styling"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-css",children:"/* Add to src/styles/Counter.css */\n.persistent-counter {\n  max-width: 400px;\n}\n\n.storage-info {\n  font-size: 0.875rem;\n  color: #718096;\n  margin-bottom: 1rem;\n  text-align: center;\n}\n\n.storage-info code {\n  background: #f7fafc;\n  padding: 0.25rem 0.5rem;\n  border-radius: 3px;\n  font-family: 'Courier New', monospace;\n}\n\n.storage-controls {\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.btn-danger {\n  background: #f56565;\n  color: white;\n  font-size: 0.875rem;\n  padding: 0.5rem 1rem;\n}\n\n.btn-danger:hover {\n  background: #e53e3e;\n  transform: translateY(-1px);\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"step-4-animated-counter",children:"Step 4: Animated Counter"}),"\n",(0,a.jsx)(e.p,{children:"Add smooth animations to make the counter more engaging."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'// src/components/AnimatedCounter.js\nimport { createComponent } from \'refract\';\n\nconst AnimatedCounter = createComponent(({ lens }) => {\n  const count = lens.useRefraction(0);\n  const displayCount = lens.useRefraction(0);\n  const isAnimating = lens.useRefraction(false);\n  const step = lens.useRefraction(1);\n  \n  // Animate count changes\n  lens.useEffect(() => {\n    if (count.value === displayCount.value) return;\n    \n    isAnimating.set(true);\n    const startValue = displayCount.value;\n    const endValue = count.value;\n    const duration = 300;\n    const startTime = Date.now();\n    \n    const animate = () => {\n      const elapsed = Date.now() - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n      \n      // Easing function for smooth animation\n      const easeOut = 1 - Math.pow(1 - progress, 3);\n      const currentValue = Math.round(startValue + (endValue - startValue) * easeOut);\n      \n      displayCount.set(currentValue);\n      \n      if (progress < 1) {\n        requestAnimationFrame(animate);\n      } else {\n        isAnimating.set(false);\n      }\n    };\n    \n    requestAnimationFrame(animate);\n  }, [count.value]);\n  \n  // Flash effect for button clicks\n  const buttonRef = lens.useRefraction(null);\n  const flashTrigger = lens.useRefraction(0);\n  \n  lens.useFlash(() => {\n    if (buttonRef.value && flashTrigger.value > 0) {\n      buttonRef.value.style.transform = \'scale(0.95)\';\n      setTimeout(() => {\n        if (buttonRef.value) {\n          buttonRef.value.style.transform = \'scale(1)\';\n        }\n      }, 100);\n    }\n  }, [flashTrigger.value]);\n  \n  const increment = () => {\n    count.set(count.value + step.value);\n    flashTrigger.set(prev => prev + 1);\n  };\n  \n  const decrement = () => {\n    count.set(count.value - step.value);\n    flashTrigger.set(prev => prev + 1);\n  };\n  \n  const reset = () => {\n    count.set(0);\n    flashTrigger.set(prev => prev + 1);\n  };\n  \n  return (\n    <div className="counter animated-counter">\n      <h2>Animated Counter</h2>\n      \n      <div className="step-control">\n        <label htmlFor="step-input">Step Size:</label>\n        <input\n          id="step-input"\n          type="number"\n          value={step.value}\n          onChange={(e) => step.set(parseInt(e.target.value) || 1)}\n          min="1"\n          max="100"\n          className="step-input"\n        />\n      </div>\n      \n      <div className="counter-display">\n        <span \n          className={`count-value ${isAnimating.value ? \'animating\' : \'\'}`}\n        >\n          {displayCount.value}\n        </span>\n      </div>\n      \n      <div className="counter-controls" ref={(el) => buttonRef.set(el)}>\n        <button onClick={decrement} className="btn btn-secondary">\n          -{step.value}\n        </button>\n        <button onClick={reset} className="btn btn-outline">\n          Reset\n        </button>\n        <button onClick={increment} className="btn btn-primary">\n          +{step.value}\n        </button>\n      </div>\n      \n      {isAnimating.value && (\n        <div className="animation-indicator">\n          Animating...\n        </div>\n      )}\n    </div>\n  );\n});\n\nexport default AnimatedCounter;\n'})}),"\n",(0,a.jsx)(e.h3,{id:"add-animation-styling",children:"Add Animation Styling"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-css",children:"/* Add to src/styles/Counter.css */\n.animated-counter .count-value {\n  transition: color 0.3s ease;\n}\n\n.animated-counter .count-value.animating {\n  color: #4299e1;\n}\n\n.counter-controls {\n  transition: transform 0.1s ease;\n}\n\n.animation-indicator {\n  margin-top: 1rem;\n  font-size: 0.875rem;\n  color: #4299e1;\n  font-style: italic;\n}\n\n/* Button hover animations */\n.btn {\n  transition: all 0.2s ease;\n}\n\n.btn:active {\n  transform: translateY(1px);\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"step-5-multiple-counter-manager",children:"Step 5: Multiple Counter Manager"}),"\n",(0,a.jsx)(e.p,{children:"Create a component that manages multiple counter instances."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'// src/components/CounterManager.js\nimport { createComponent } from \'refract\';\nimport PersistentCounter from \'./PersistentCounter\';\n\nconst CounterManager = createComponent(({ lens }) => {\n  const counters = lens.useRefraction([\n    { id: 1, name: \'Counter A\', storageKey: \'counter-a\' },\n    { id: 2, name: \'Counter B\', storageKey: \'counter-b\' }\n  ]);\n  \n  const newCounterName = lens.useRefraction(\'\');\n  \n  const addCounter = () => {\n    if (!newCounterName.value.trim()) return;\n    \n    const newCounter = {\n      id: Date.now(),\n      name: newCounterName.value,\n      storageKey: `counter-${Date.now()}`\n    };\n    \n    counters.set(prev => [...prev, newCounter]);\n    newCounterName.set(\'\');\n  };\n  \n  const removeCounter = (id) => {\n    counters.set(prev => prev.filter(counter => counter.id !== id));\n  };\n  \n  const totalCount = lens.useDerived(() => {\n    return counters.value.reduce((total, counter) => {\n      try {\n        const stored = localStorage.getItem(counter.storageKey);\n        return total + (stored ? parseInt(stored) : 0);\n      } catch {\n        return total;\n      }\n    }, 0);\n  }, [counters.value]);\n  \n  return (\n    <div className="counter-manager">\n      <h1>Counter Manager</h1>\n      \n      <div className="manager-stats">\n        <p>Total Counters: {counters.value.length}</p>\n        <p>Combined Total: {totalCount.value}</p>\n      </div>\n      \n      <div className="add-counter">\n        <input\n          type="text"\n          value={newCounterName.value}\n          onChange={(e) => newCounterName.set(e.target.value)}\n          placeholder="Enter counter name"\n          className="counter-name-input"\n          onKeyPress={(e) => e.key === \'Enter\' && addCounter()}\n        />\n        <button onClick={addCounter} className="btn btn-primary">\n          Add Counter\n        </button>\n      </div>\n      \n      <div className="counters-grid">\n        {counters.value.map(counter => (\n          <div key={counter.id} className="counter-wrapper">\n            <div className="counter-header">\n              <h3>{counter.name}</h3>\n              <button \n                onClick={() => removeCounter(counter.id)}\n                className="btn btn-danger btn-small"\n                title="Remove counter"\n              >\n                \xd7\n              </button>\n            </div>\n            <PersistentCounter storageKey={counter.storageKey} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n});\n\nexport default CounterManager;\n'})}),"\n",(0,a.jsx)(e.h3,{id:"add-manager-styling",children:"Add Manager Styling"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-css",children:"/* Add to src/styles/Counter.css */\n.counter-manager {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem;\n}\n\n.counter-manager h1 {\n  text-align: center;\n  color: white;\n  margin-bottom: 2rem;\n  font-size: 2.5rem;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n}\n\n.manager-stats {\n  background: rgba(255, 255, 255, 0.1);\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 2rem;\n  text-align: center;\n  color: white;\n}\n\n.manager-stats p {\n  margin: 0.5rem 0;\n  font-size: 1.1rem;\n}\n\n.add-counter {\n  display: flex;\n  gap: 1rem;\n  justify-content: center;\n  margin-bottom: 3rem;\n}\n\n.counter-name-input {\n  padding: 0.75rem;\n  border: 2px solid #e2e8f0;\n  border-radius: 6px;\n  font-size: 1rem;\n  min-width: 200px;\n}\n\n.counter-name-input:focus {\n  outline: none;\n  border-color: #4299e1;\n  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);\n}\n\n.counters-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n  gap: 2rem;\n}\n\n.counter-wrapper {\n  position: relative;\n}\n\n.counter-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.counter-header h3 {\n  color: white;\n  margin: 0;\n  font-size: 1.25rem;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\n}\n\n.btn-small {\n  padding: 0.25rem 0.5rem;\n  font-size: 1.25rem;\n  line-height: 1;\n  min-width: auto;\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"step-6-final-app-integration",children:"Step 6: Final App Integration"}),"\n",(0,a.jsx)(e.p,{children:"Update your main App component to showcase all the counters."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"// src/App.js\nimport { createComponent } from 'refract';\nimport Counter from './components/Counter';\nimport EnhancedCounter from './components/EnhancedCounter';\nimport PersistentCounter from './components/PersistentCounter';\nimport AnimatedCounter from './components/AnimatedCounter';\nimport CounterManager from './components/CounterManager';\nimport './styles/App.css';\nimport './styles/Counter.css';\n\nconst App = createComponent(({ lens }) => {\n  const currentView = lens.useRefraction('showcase');\n  \n  const views = {\n    showcase: 'Counter Showcase',\n    manager: 'Counter Manager'\n  };\n  \n  const renderCurrentView = () => {\n    switch (currentView.value) {\n      case 'manager':\n        return <CounterManager />;\n      case 'showcase':\n      default:\n        return (\n          <div className=\"showcase-grid\">\n            <Counter initialValue={0} />\n            <EnhancedCounter initialValue={10} initialStep={5} />\n            <PersistentCounter storageKey=\"demo-counter\" />\n            <AnimatedCounter />\n          </div>\n        );\n    }\n  };\n  \n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1>Refract Counter Tutorial</h1>\n        <p>Learn Refract by building interactive counter components</p>\n        \n        <nav className=\"app-nav\">\n          {Object.entries(views).map(([key, label]) => (\n            <button\n              key={key}\n              onClick={() => currentView.set(key)}\n              className={`nav-btn ${currentView.value === key ? 'active' : ''}`}\n            >\n              {label}\n            </button>\n          ))}\n        </nav>\n      </header>\n      \n      <main>\n        {renderCurrentView()}\n      </main>\n    </div>\n  );\n});\n\nexport default App;\n"})}),"\n",(0,a.jsx)(e.h3,{id:"final-app-styling",children:"Final App Styling"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-css",children:"/* Add to src/styles/App.css */\n.app-nav {\n  margin-top: 2rem;\n  display: flex;\n  gap: 1rem;\n  justify-content: center;\n}\n\n.nav-btn {\n  padding: 0.75rem 1.5rem;\n  border: 2px solid rgba(255, 255, 255, 0.3);\n  background: rgba(255, 255, 255, 0.1);\n  color: white;\n  border-radius: 6px;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.nav-btn:hover {\n  background: rgba(255, 255, 255, 0.2);\n  border-color: rgba(255, 255, 255, 0.5);\n}\n\n.nav-btn.active {\n  background: white;\n  color: #4a5568;\n  border-color: white;\n}\n\n.showcase-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n  gap: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n@media (max-width: 768px) {\n  .app {\n    padding: 1rem;\n  }\n  \n  .app-header h1 {\n    font-size: 2rem;\n  }\n  \n  .showcase-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .counters-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .app-nav {\n    flex-direction: column;\n    align-items: center;\n  }\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"what-youve-learned",children:"What You've Learned"}),"\n",(0,a.jsx)(e.p,{children:"Congratulations! You've built a comprehensive counter application using Refract. Here's what you've learned:"}),"\n",(0,a.jsx)(e.h3,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Components"}),": Created reusable, reactive components with ",(0,a.jsx)(e.code,{children:"createComponent"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"State Management"}),": Used ",(0,a.jsx)(e.code,{children:"lens.useRefraction"})," for reactive state"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Effects"}),": Implemented side effects with ",(0,a.jsx)(e.code,{children:"lens.useEffect"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Flash Effects"}),": Added animations with ",(0,a.jsx)(e.code,{children:"lens.useFlash"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Derived State"}),": Computed values with ",(0,a.jsx)(e.code,{children:"lens.useDerived"})]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"advanced-patterns",children:"Advanced Patterns"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Persistence"}),": Integrated with localStorage for data persistence"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Animation"}),": Created smooth transitions and visual feedback"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Composition"}),": Built complex UIs from simple components"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"State Synchronization"}),": Managed multiple related state values"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Component isolation and reusability"}),"\n",(0,a.jsx)(e.li,{children:"Proper effect cleanup and dependency management"}),"\n",(0,a.jsx)(e.li,{children:"Performance optimization with batched updates"}),"\n",(0,a.jsx)(e.li,{children:"Responsive design and accessibility considerations"}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsx)(e.p,{children:"Now that you've mastered the basics, try these challenges:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Add Keyboard Shortcuts"}),": Implement keyboard controls for increment/decrement"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Counter Themes"}),": Add different visual themes for counters"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Export/Import"}),": Allow users to save and load counter configurations"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Counter History"}),": Track and display the history of counter changes"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Real-time Sync"}),": Sync counters across multiple browser tabs"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"../api/overview",children:"Refract API Reference"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"../advanced/performance",children:"Advanced Patterns"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"../advanced/testing",children:"Testing Guide"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"https://github.com/refract-js/examples",children:"Community Examples"})}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>i});var r=t(6540);const a={},s=r.createContext(a);function o(n){const e=r.useContext(s);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);