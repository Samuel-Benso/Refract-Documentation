"use strict";(self.webpackChunkrefract_docs=self.webpackChunkrefract_docs||[]).push([[6186],{3262:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var t=a(4848),s=a(8453);const r={},i="Refractions",c={id:"concepts/refractions",title:"Refractions",description:"Refractions are the core reactive primitives in Refract. They represent units of state that automatically notify the UI when their values change. Think of them as reactive variables that eliminate the need for manual state management and re-rendering logic.",source:"@site/docs/concepts/refractions.md",sourceDirName:"concepts",slug:"/concepts/refractions",permalink:"/docs/concepts/refractions",draft:!1,unlisted:!1,editUrl:"https://github.com/refract-js/refract/tree/main/docs/docs/concepts/refractions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Components",permalink:"/docs/concepts/components"},next:{title:"Lenses",permalink:"/docs/concepts/lenses"}},o={},l=[{value:"What are Refractions?",id:"what-are-refractions",level:2},{value:"Creating Refractions",id:"creating-refractions",level:2},{value:"Basic Refractions",id:"basic-refractions",level:3},{value:"Global Refractions",id:"global-refractions",level:3},{value:"Refraction API",id:"refraction-api",level:2},{value:"Reading Values",id:"reading-values",level:3},{value:"Updating Values",id:"updating-values",level:3},{value:"Batch Updates",id:"batch-updates",level:3},{value:"Advanced Patterns",id:"advanced-patterns",level:2},{value:"Derived Refractions",id:"derived-refractions",level:3},{value:"Async Refractions",id:"async-refractions",level:3},{value:"Refraction Validation",id:"refraction-validation",level:3},{value:"Refraction Persistence",id:"refraction-persistence",level:2},{value:"Local Storage Integration",id:"local-storage-integration",level:3},{value:"URL Synchronization",id:"url-synchronization",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Avoiding Unnecessary Updates",id:"avoiding-unnecessary-updates",level:3},{value:"Debouncing Updates",id:"debouncing-updates",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Initialize with Appropriate Types",id:"1-initialize-with-appropriate-types",level:3},{value:"2. Use Descriptive Names",id:"2-use-descriptive-names",level:3},{value:"3. Keep Refractions Focused",id:"3-keep-refractions-focused",level:3},{value:"4. Handle Edge Cases",id:"4-handle-edge-cases",level:3},{value:"Debugging Refractions",id:"debugging-refractions",level:2},{value:"Development Tools",id:"development-tools",level:3},{value:"Refraction Inspector",id:"refraction-inspector",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"refractions",children:"Refractions"}),"\n",(0,t.jsx)(n.p,{children:"Refractions are the core reactive primitives in Refract. They represent units of state that automatically notify the UI when their values change. Think of them as reactive variables that eliminate the need for manual state management and re-rendering logic."}),"\n",(0,t.jsx)(n.h2,{id:"what-are-refractions",children:"What are Refractions?"}),"\n",(0,t.jsx)(n.p,{children:"A refraction is a reactive container that holds a value and notifies subscribers when that value changes. Unlike traditional state variables, refractions automatically trigger UI updates when modified, making your applications truly reactive."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { useRefraction } from 'refract';\n\n// Create a refraction with initial value\nconst count = useRefraction(0);\n\n// Read the current value\nconsole.log(count.value); // 0\n\n// Update the value (triggers UI update)\ncount.set(5);\nconsole.log(count.value); // 5\n"})}),"\n",(0,t.jsx)(n.h2,{id:"creating-refractions",children:"Creating Refractions"}),"\n",(0,t.jsx)(n.h3,{id:"basic-refractions",children:"Basic Refractions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { createComponent } from 'refract';\n\nconst BasicExample = createComponent(({ lens }) => {\n  // Primitive values\n  const name = lens.useRefraction('John');\n  const age = lens.useRefraction(25);\n  const isActive = lens.useRefraction(true);\n  \n  // Objects and arrays\n  const user = lens.useRefraction({ \n    id: 1, \n    email: 'john@example.com' \n  });\n  const items = lens.useRefraction(['apple', 'banana', 'orange']);\n  \n  return (\n    <div>\n      <p>Name: {name.value}</p>\n      <p>Age: {age.value}</p>\n      <p>Status: {isActive.value ? 'Active' : 'Inactive'}</p>\n    </div>\n  );\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"global-refractions",children:"Global Refractions"}),"\n",(0,t.jsx)(n.p,{children:"Create refractions that can be shared across components:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// store/theme.js\nimport { createRefraction } from 'refract';\n\nexport const theme = createRefraction('light');\nexport const user = createRefraction(null);\nexport const notifications = createRefraction([]);\n\n// components/ThemeToggle.js\nimport { createComponent } from 'refract';\nimport { theme } from '../store/theme';\n\nconst ThemeToggle = createComponent(({ lens }) => {\n  const toggleTheme = () => {\n    theme.set(theme.value === 'light' ? 'dark' : 'light');\n  };\n  \n  return (\n    <button onClick={toggleTheme}>\n      Current theme: {theme.value}\n    </button>\n  );\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"refraction-api",children:"Refraction API"}),"\n",(0,t.jsx)(n.h3,{id:"reading-values",children:"Reading Values"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const counter = lens.useRefraction(0);\n\n// Get current value\nconst currentValue = counter.value;\n\n// Subscribe to changes (automatic in components)\ncounter.subscribe((newValue) => {\n  console.log('Counter changed to:', newValue);\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"updating-values",children:"Updating Values"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const state = lens.useRefraction({ count: 0, name: 'Test' });\n\n// Direct assignment\nstate.set({ count: 1, name: 'Updated' });\n\n// Functional update\nstate.set(prev => ({ ...prev, count: prev.count + 1 }));\n\n// Update specific property (for objects)\nstate.update('count', prev => prev + 1);\nstate.update('name', 'New Name');\n"})}),"\n",(0,t.jsx)(n.h3,{id:"batch-updates",children:"Batch Updates"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const BatchExample = createComponent(({ lens }) => {\n  const firstName = lens.useRefraction('');\n  const lastName = lens.useRefraction('');\n  const email = lens.useRefraction('');\n  \n  const updateUser = () => {\n    // Batch multiple updates to prevent multiple re-renders\n    lens.batch(() => {\n      firstName.set('John');\n      lastName.set('Doe');\n      email.set('john.doe@example.com');\n    });\n  };\n  \n  return (\n    <div>\n      <p>{firstName.value} {lastName.value}</p>\n      <p>{email.value}</p>\n      <button onClick={updateUser}>Update User</button>\n    </div>\n  );\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-patterns",children:"Advanced Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"derived-refractions",children:"Derived Refractions"}),"\n",(0,t.jsx)(n.p,{children:"Create refractions that automatically compute values based on other refractions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const ShoppingCart = createComponent(({ lens }) => {\n  const items = lens.useRefraction([\n    { id: 1, name: 'Apple', price: 1.50, quantity: 2 },\n    { id: 2, name: 'Banana', price: 0.75, quantity: 3 }\n  ]);\n  \n  // Derived refraction for total price\n  const total = lens.useDerived(() => {\n    return items.value.reduce((sum, item) => \n      sum + (item.price * item.quantity), 0\n    );\n  }, [items]);\n  \n  const addItem = (item) => {\n    items.set([...items.value, item]);\n  };\n  \n  return (\n    <div>\n      <h3>Shopping Cart</h3>\n      {items.value.map(item => (\n        <div key={item.id}>\n          {item.name} - ${item.price} x {item.quantity}\n        </div>\n      ))}\n      <h4>Total: ${total.value.toFixed(2)}</h4>\n    </div>\n  );\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"async-refractions",children:"Async Refractions"}),"\n",(0,t.jsx)(n.p,{children:"Handle asynchronous operations with refractions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const AsyncDataExample = createComponent(({ lens }) => {\n  const data = lens.useRefraction(null);\n  const loading = lens.useRefraction(false);\n  const error = lens.useRefraction(null);\n  \n  const fetchData = async () => {\n    loading.set(true);\n    error.set(null);\n    \n    try {\n      const response = await fetch('/api/data');\n      const result = await response.json();\n      data.set(result);\n    } catch (err) {\n      error.set(err.message);\n    } finally {\n      loading.set(false);\n    }\n  };\n  \n  lens.useEffect(() => {\n    fetchData();\n  }, []);\n  \n  if (loading.value) return <div>Loading...</div>;\n  if (error.value) return <div>Error: {error.value}</div>;\n  \n  return (\n    <div>\n      <pre>{JSON.stringify(data.value, null, 2)}</pre>\n      <button onClick={fetchData}>Refresh</button>\n    </div>\n  );\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"refraction-validation",children:"Refraction Validation"}),"\n",(0,t.jsx)(n.p,{children:"Add validation to refractions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const ValidatedForm = createComponent(({ lens }) => {\n  const email = lens.useRefraction('');\n  const password = lens.useRefraction('');\n  \n  // Validation refractions\n  const emailValid = lens.useDerived(() => {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email.value);\n  }, [email]);\n  \n  const passwordValid = lens.useDerived(() => {\n    return password.value.length >= 8;\n  }, [password]);\n  \n  const formValid = lens.useDerived(() => {\n    return emailValid.value && passwordValid.value;\n  }, [emailValid, passwordValid]);\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (formValid.value) {\n      console.log('Form submitted:', { \n        email: email.value, \n        password: password.value \n      });\n    }\n  };\n  \n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <input\n          type=\"email\"\n          value={email.value}\n          onChange={(e) => email.set(e.target.value)}\n          placeholder=\"Email\"\n          className={emailValid.value ? 'valid' : 'invalid'}\n        />\n        {!emailValid.value && email.value && (\n          <span className=\"error\">Invalid email format</span>\n        )}\n      </div>\n      \n      <div>\n        <input\n          type=\"password\"\n          value={password.value}\n          onChange={(e) => password.set(e.target.value)}\n          placeholder=\"Password\"\n          className={passwordValid.value ? 'valid' : 'invalid'}\n        />\n        {!passwordValid.value && password.value && (\n          <span className=\"error\">Password must be at least 8 characters</span>\n        )}\n      </div>\n      \n      <button type=\"submit\" disabled={!formValid.value}>\n        Submit\n      </button>\n    </form>\n  );\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"refraction-persistence",children:"Refraction Persistence"}),"\n",(0,t.jsx)(n.h3,{id:"local-storage-integration",children:"Local Storage Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const usePersistentRefraction = (key, defaultValue) => {\n  const stored = localStorage.getItem(key);\n  const initial = stored ? JSON.parse(stored) : defaultValue;\n  \n  const refraction = useRefraction(initial);\n  \n  // Persist changes to localStorage\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(refraction.value));\n  }, [refraction.value, key]);\n  \n  return refraction;\n};\n\nconst PersistentCounter = createComponent(({ lens }) => {\n  const count = lens.useOptic(() => \n    usePersistentRefraction('counter', 0), []\n  );\n  \n  return (\n    <div>\n      <p>Persistent Count: {count.value}</p>\n      <button onClick={() => count.set(count.value + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"url-synchronization",children:"URL Synchronization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const useUrlRefraction = (param, defaultValue) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const value = searchParams.get(param) || defaultValue;\n  \n  const refraction = useRefraction(value);\n  \n  useEffect(() => {\n    const newParams = new URLSearchParams(searchParams);\n    if (refraction.value) {\n      newParams.set(param, refraction.value);\n    } else {\n      newParams.delete(param);\n    }\n    setSearchParams(newParams);\n  }, [refraction.value, param, searchParams, setSearchParams]);\n  \n  return refraction;\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsx)(n.h3,{id:"avoiding-unnecessary-updates",children:"Avoiding Unnecessary Updates"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Specific updates\nconst updateSpecificField = () => {\n  user.update('name', 'New Name');\n};\n\n// \u274c Bad - Full object replacement for small changes\nconst updateBadly = () => {\n  user.set({ ...user.value, name: 'New Name' });\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"debouncing-updates",children:"Debouncing Updates"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const SearchInput = createComponent(({ lens }) => {\n  const query = lens.useRefraction('');\n  const debouncedQuery = lens.useRefraction('');\n  \n  // Debounce the search query\n  lens.useEffect(() => {\n    const timer = setTimeout(() => {\n      debouncedQuery.set(query.value);\n    }, 300);\n    \n    return () => clearTimeout(timer);\n  }, [query.value]);\n  \n  // Perform search when debounced query changes\n  lens.useEffect(() => {\n    if (debouncedQuery.value) {\n      performSearch(debouncedQuery.value);\n    }\n  }, [debouncedQuery.value]);\n  \n  return (\n    <input\n      value={query.value}\n      onChange={(e) => query.set(e.target.value)}\n      placeholder=\"Search...\"\n    />\n  );\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-initialize-with-appropriate-types",children:"1. Initialize with Appropriate Types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good\nconst items = lens.useRefraction([]);\nconst user = lens.useRefraction(null);\nconst count = lens.useRefraction(0);\n\n// \u274c Bad\nconst items = lens.useRefraction(); // undefined\nconst user = lens.useRefraction({}); // Empty object when null expected\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-use-descriptive-names",children:"2. Use Descriptive Names"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good\nconst isLoading = lens.useRefraction(false);\nconst userProfile = lens.useRefraction(null);\nconst shoppingCartItems = lens.useRefraction([]);\n\n// \u274c Bad\nconst flag = lens.useRefraction(false);\nconst data = lens.useRefraction(null);\nconst items = lens.useRefraction([]);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-keep-refractions-focused",children:"3. Keep Refractions Focused"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Separate concerns\nconst firstName = lens.useRefraction('');\nconst lastName = lens.useRefraction('');\nconst email = lens.useRefraction('');\n\n// \u274c Bad - Monolithic state\nconst formData = lens.useRefraction({\n  firstName: '',\n  lastName: '',\n  email: '',\n  preferences: {},\n  settings: {},\n  // ... too much in one refraction\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-handle-edge-cases",children:"4. Handle Edge Cases"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const SafeRefraction = createComponent(({ lens }) => {\n  const data = lens.useRefraction(null);\n  \n  const updateData = (newData) => {\n    // Validate before setting\n    if (newData && typeof newData === 'object') {\n      data.set(newData);\n    }\n  };\n  \n  return (\n    <div>\n      {data.value ? (\n        <div>{data.value.name}</div>\n      ) : (\n        <div>No data available</div>\n      )}\n    </div>\n  );\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"debugging-refractions",children:"Debugging Refractions"}),"\n",(0,t.jsx)(n.h3,{id:"development-tools",children:"Development Tools"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Enable refraction debugging in development\nif (process.env.NODE_ENV === 'development') {\n  const debugRefraction = (name, refraction) => {\n    refraction.subscribe((value) => {\n      console.log(`[${name}] changed to:`, value);\n    });\n  };\n  \n  debugRefraction('user', user);\n  debugRefraction('theme', theme);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"refraction-inspector",children:"Refraction Inspector"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const RefractionInspector = createComponent(({ lens, refraction, name }) => {\n  const history = lens.useRefraction([]);\n  \n  lens.useEffect(() => {\n    const unsubscribe = refraction.subscribe((value) => {\n      history.set(prev => [...prev, {\n        timestamp: Date.now(),\n        value: JSON.stringify(value)\n      }]);\n    });\n    \n    return unsubscribe;\n  }, [refraction]);\n  \n  return (\n    <div className="refraction-inspector">\n      <h4>{name} History</h4>\n      <div>Current: {JSON.stringify(refraction.value)}</div>\n      <ul>\n        {history.value.map((entry, index) => (\n          <li key={index}>\n            {new Date(entry.timestamp).toLocaleTimeString()}: {entry.value}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(n.p,{children:"Now that you understand refractions, explore:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./lenses",children:"Lenses"})})," - Scoped access to reactive features"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./optics",children:"Optics"})})," - Reusable logic with refractions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./effects",children:"Effects"})})," - Side effects and lifecycle management"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>c});var t=a(6540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);