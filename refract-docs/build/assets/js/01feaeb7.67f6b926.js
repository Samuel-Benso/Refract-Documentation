"use strict";(self.webpackChunkrefract_docs=self.webpackChunkrefract_docs||[]).push([[854],{8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>l});var s=t(6540);const i={},r=s.createContext(i);function c(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(r.Provider,{value:n},e.children)}},9967:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"advanced/testing","title":"Testing Guide","description":"This guide covers best practices and utilities for testing Refract applications.","source":"@site/docs/advanced/testing.md","sourceDirName":"advanced","slug":"/advanced/testing","permalink":"/docs/advanced/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/advanced/testing.md","tags":[],"version":"current","frontMatter":{"id":"testing","title":"Testing Guide"}}');var i=t(4848),r=t(8453);const c={id:"testing",title:"Testing Guide"},l="Testing in Refract",a={},o=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Setup",id:"setup",level:2},{value:"Testing Components",id:"testing-components",level:2},{value:"Basic Component Test",id:"basic-component-test",level:3},{value:"Testing with Context",id:"testing-with-context",level:3},{value:"Testing State Management",id:"testing-state-management",level:2},{value:"Testing State Updates",id:"testing-state-updates",level:3},{value:"Testing Effects",id:"testing-effects",level:2},{value:"Mocking API Calls",id:"mocking-api-calls",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Tools",id:"tools",level:2},{value:"Related",id:"related",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"testing-in-refract",children:"Testing in Refract"})}),"\n",(0,i.jsx)(n.p,{children:"This guide covers best practices and utilities for testing Refract applications."}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#setup",children:"Setup"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#testing-components",children:"Testing Components"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#testing-state-management",children:"Testing State Management"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#testing-effects",children:"Testing Effects"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,i.jsx)(n.p,{children:"First, ensure you have the necessary testing libraries installed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev @testing-library/react @testing-library/jest-dom jest @testing-library/user-event\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing-components",children:"Testing Components"}),"\n",(0,i.jsx)(n.h3,{id:"basic-component-test",children:"Basic Component Test"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { render, screen } from '@testing-library/react';\nimport MyComponent from './MyComponent';\n\ntest('renders component', () => {\n  render(<MyComponent />);\n  expect(screen.getByText('Hello, World!')).toBeInTheDocument();\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"testing-with-context",children:"Testing with Context"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"test('renders with context', () => {\n  render(\n    <MyContext.Provider value={{ value: 'test' }}>\n      <MyComponent />\n    </MyContext.Provider>\n  );\n  // Your assertions\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing-state-management",children:"Testing State Management"}),"\n",(0,i.jsx)(n.h3,{id:"testing-state-updates",children:"Testing State Updates"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { render, fireEvent } from '@testing-library/react';\n\ntest('updates state on click', () => {\n  const { getByText } = render(<Counter />);\n  const button = getByText('Increment');\n  fireEvent.click(button);\n  expect(getByText('Count: 1')).toBeInTheDocument();\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing-effects",children:"Testing Effects"}),"\n",(0,i.jsx)(n.h3,{id:"mocking-api-calls",children:"Mocking API Calls"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { render, waitFor } from '@testing-library/react';\nimport axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\n\nconst mock = new MockAdapter(axios);\n\ntest('fetches data on mount', async () => {\n  mock.onGet('/api/data').reply(200, { data: 'test' });\n  \n  const { findByText } = render(<DataFetcher />);\n  \n  await waitFor(() => {\n    expect(findByText('test')).toBeInTheDocument();\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Test Behavior, Not Implementation"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Focus on what the user sees and does"}),"\n",(0,i.jsx)(n.li,{children:"Avoid testing implementation details"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use Test IDs Sparingly"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Prefer text content and ARIA roles for queries"}),"\n",(0,i.jsx)(n.li,{children:"Use test IDs as a last resort"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Keep Tests Isolated"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Each test should be independent"}),"\n",(0,i.jsx)(n.li,{children:"Reset mocks between tests"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Test Edge Cases"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Empty states"}),"\n",(0,i.jsx)(n.li,{children:"Loading states"}),"\n",(0,i.jsx)(n.li,{children:"Error states"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"tools",children:"Tools"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Jest"}),"\n",(0,i.jsx)(n.li,{children:"React Testing Library"}),"\n",(0,i.jsx)(n.li,{children:"MSW (Mock Service Worker)"}),"\n",(0,i.jsx)(n.li,{children:"Jest DOM"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related",children:"Related"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./performance",children:"Performance Optimization"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/api",children:"API Reference"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);