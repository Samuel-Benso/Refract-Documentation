"use strict";(self.webpackChunkrefract_docs=self.webpackChunkrefract_docs||[]).push([[8600],{2660:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"concepts/state-management","title":"State Management in Refract","description":"Refract provides a flexible and efficient state management system that works seamlessly with React components. This guide covers the core concepts and patterns for managing state in Refract applications.","source":"@site/docs/concepts/state-management.md","sourceDirName":"concepts","slug":"/concepts/state-management","permalink":"/docs/concepts/state-management","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/concepts/state-management.md","tags":[],"version":"current","frontMatter":{"id":"state-management","title":"State Management in Refract"}}');var s=n(4848),c=n(8453);const r={id:"state-management",title:"State Management in Refract"},i="State Management",l={},o=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"1. Local Component State",id:"1-local-component-state",level:3},{value:"2. Global State",id:"2-global-state",level:3},{value:"State Updates",id:"state-updates",level:2},{value:"Basic Updates",id:"basic-updates",level:3},{value:"Batching Updates",id:"batching-updates",level:3},{value:"State Composition",id:"state-composition",level:2},{value:"Derived State",id:"derived-state",level:3},{value:"State Selectors",id:"state-selectors",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Advanced Patterns",id:"advanced-patterns",level:2},{value:"State Machines",id:"state-machines",level:3},{value:"Middleware",id:"middleware",level:3},{value:"Related",id:"related",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"state-management",children:"State Management"})}),"\n",(0,s.jsx)(t.p,{children:"Refract provides a flexible and efficient state management system that works seamlessly with React components. This guide covers the core concepts and patterns for managing state in Refract applications."}),"\n",(0,s.jsx)(t.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,s.jsx)(t.h3,{id:"1-local-component-state",children:"1. Local Component State"}),"\n",(0,s.jsxs)(t.p,{children:["Use ",(0,s.jsx)(t.code,{children:"useRefraction"})," hook for local component state:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"import { createComponent, useRefraction } from 'refract';\n\nconst Counter = createComponent(({ lens }) => {\n  const count = lens.useRefraction(0);\n  \n  return (\n    <div>\n      <p>Count: {count.value}</p>\n      <button onClick={() => count.value++}>Increment</button>\n    </div>\n  );\n});\n"})}),"\n",(0,s.jsx)(t.h3,{id:"2-global-state",children:"2. Global State"}),"\n",(0,s.jsxs)(t.p,{children:["Create global state using ",(0,s.jsx)(t.code,{children:"createRefraction"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"// store.js\nimport { createRefraction } from 'refract';\n\nexport const store = createRefraction({\n  user: null,\n  theme: 'light',\n  preferences: {}\n});\n\n// In your component\nconst { user, theme } = store.value;\n"})}),"\n",(0,s.jsx)(t.h2,{id:"state-updates",children:"State Updates"}),"\n",(0,s.jsx)(t.h3,{id:"basic-updates",children:"Basic Updates"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"// Direct mutation (simplest)\ncount.value += 1;\n\n// Using setter function (functional update)\ncount.set(prev => prev + 1);\n"})}),"\n",(0,s.jsx)(t.h3,{id:"batching-updates",children:"Batching Updates"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"import { batch } from 'refract';\n\n// Multiple state updates in a single render\nbatch(() => {\n  user.value = { ...user.value, name: 'John' };\n  theme.value = 'dark';\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"state-composition",children:"State Composition"}),"\n",(0,s.jsx)(t.h3,{id:"derived-state",children:"Derived State"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"const fullName = useDerived(\n  () => `${firstName.value} ${lastName.value}`,\n  [firstName, lastName]\n);\n"})}),"\n",(0,s.jsx)(t.h3,{id:"state-selectors",children:"State Selectors"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"const userName = useRefraction(\n  () => store.value.user?.name,\n  [store]\n);\n"})}),"\n",(0,s.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Colocate State"}),": Keep state as close to where it's used as possible"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Lift State Up"}),": When multiple components need the same state"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Use Context for Global State"}),": For app-wide state that many components need"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Memoize Expensive Computations"}),": Use ",(0,s.jsx)(t.code,{children:"useMemo"})," for derived state"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Batch Updates"}),": Group related state updates together"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"advanced-patterns",children:"Advanced Patterns"}),"\n",(0,s.jsx)(t.h3,{id:"state-machines",children:"State Machines"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"const [state, send] = useMachine({\n  initial: 'idle',\n  states: {\n    idle: {\n      on: { FETCH: 'loading' }\n    },\n    loading: {\n      on: {\n        SUCCESS: 'success',\n        ERROR: 'error'\n      }\n    },\n    // ...\n  }\n});\n"})}),"\n",(0,s.jsx)(t.h3,{id:"middleware",children:"Middleware"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"const app = createApp(App, {\n  middleware: [\n    logger,\n    devTools,\n    persistState('app-state')\n  ]\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"related",children:"Related"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"./components",children:"Components"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"./effects",children:"Effects"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"../advanced/performance",children:"Performance Optimization"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var a=n(6540);const s={},c=a.createContext(s);function r(e){const t=a.useContext(c);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(c.Provider,{value:t},e.children)}}}]);