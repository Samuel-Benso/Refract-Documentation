{"allContent":{"docusaurus-plugin-content-docs":{"default":{"loadedVersions":[{"versionName":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","path":"/docs","tagsPath":"/docs/tags","editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs","editUrlLocalized":"https://github.com/refract-js/refract/tree/main/docs/i18n/en/docusaurus-plugin-content-docs/current","isLast":true,"routePriority":-1,"sidebarFilePath":"C:\\Users\\HELLO\\Documents\\Docs\\refract-docs\\sidebars.js","contentPath":"C:\\Users\\HELLO\\Documents\\Docs\\refract-docs\\docs","contentPathLocalized":"C:\\Users\\HELLO\\Documents\\Docs\\refract-docs\\i18n\\en\\docusaurus-plugin-content-docs\\current","docs":[{"id":"advanced/performance","title":"Performance Optimization","description":"This guide covers various techniques to optimize the performance of your Refract applications.","source":"@site/docs/advanced/performance.md","sourceDirName":"advanced","slug":"/advanced/performance","permalink":"/docs/advanced/performance","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/advanced/performance.md","tags":[],"version":"current","frontMatter":{"id":"performance","title":"Performance Optimization"}},{"id":"advanced/testing","title":"Testing Guide","description":"This guide covers best practices and utilities for testing Refract applications.","source":"@site/docs/advanced/testing.md","sourceDirName":"advanced","slug":"/advanced/testing","permalink":"/docs/advanced/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/advanced/testing.md","tags":[],"version":"current","frontMatter":{"id":"testing","title":"Testing Guide"}},{"id":"api/api","title":"API Reference","description":"Welcome to the Refract API reference documentation. This section provides detailed information about the core APIs available in Refract.","source":"@site/docs/api/index.md","sourceDirName":"api","slug":"/api/","permalink":"/docs/api/","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/api/index.md","tags":[],"version":"current","frontMatter":{"id":"api","title":"API Reference"}},{"id":"api/createApp","title":"createApp","description":"The createApp function initializes a new Refract application instance. It serves as the entry point for your application, handling the root component setup and providing configuration options for the entire application.","source":"@site/docs/api/createApp.md","sourceDirName":"api","slug":"/api/createApp","permalink":"/docs/api/createApp","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/api/createApp.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"API Reference Overview","permalink":"/docs/api/overview"},"next":{"title":"createComponent","permalink":"/docs/api/createComponent"}},{"id":"api/createComponent","title":"createComponent","description":"The createComponent function helps you build interactive parts of your app in Refract. Think of components as building blocks - like buttons, forms, or entire pages. When you create a component, it automatically updates when its data changes.","source":"@site/docs/api/createComponent.md","sourceDirName":"api","slug":"/api/createComponent","permalink":"/docs/api/createComponent","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/api/createComponent.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"createApp","permalink":"/docs/api/createApp"},"next":{"title":"useLens","permalink":"/docs/api/useLens"}},{"id":"api/createOptic","title":"createOptic","description":"createOptic is a utility function that helps you create reactive references to nested state values in Refract.","source":"@site/docs/api/createOptic.md","sourceDirName":"api","slug":"/api/createOptic","permalink":"/docs/api/createOptic","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/api/createOptic.md","tags":[],"version":"current","frontMatter":{"id":"createOptic","title":"createOptic"},"sidebar":"tutorialSidebar","previous":{"title":"useOptic","permalink":"/docs/api/useOptic"},"next":{"title":"useRefraction","permalink":"/docs/api/useRefraction"}},{"id":"api/overview","title":"API Reference Overview","description":"This section provides comprehensive documentation for all Refract APIs, including core functions, hooks, utilities, and configuration options. Each API is documented with detailed descriptions, parameters, return values, and practical examples.","source":"@site/docs/api/overview.md","sourceDirName":"api","slug":"/api/overview","permalink":"/docs/api/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/api/overview.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Effects","permalink":"/docs/concepts/effects"},"next":{"title":"createApp","permalink":"/docs/api/createApp"}},{"id":"api/useEffect","title":"useEffect","description":"The useEffect hook handles side effects and lifecycle management in Refract components. It provides a declarative way to perform operations like data fetching, subscriptions, timers, and DOM manipulation while ensuring proper cleanup and dependency tracking.","source":"@site/docs/api/useEffect.md","sourceDirName":"api","slug":"/api/useEffect","permalink":"/docs/api/useEffect","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/api/useEffect.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"useRefraction","permalink":"/docs/api/useRefraction"},"next":{"title":"useFlash","permalink":"/docs/api/useFlash"}},{"id":"api/useFlash","title":"useFlash","description":"The useFlash hook executes effects after the component has rendered and the DOM has been updated. It's specifically designed for operations that need to happen after the render cycle, such as animations, DOM measurements, and focus management.","source":"@site/docs/api/useFlash.md","sourceDirName":"api","slug":"/api/useFlash","permalink":"/docs/api/useFlash","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/api/useFlash.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"useEffect","permalink":"/docs/api/useEffect"},"next":{"title":"Building a Counter App","permalink":"/docs/tutorials/counter-app"}},{"id":"api/useLens","title":"useLens","description":"The useLens hook provides access to the lens system within Refract components. The lens is the primary interface for accessing reactive features like state management, effects, and optics in a component-scoped manner.","source":"@site/docs/api/useLens.md","sourceDirName":"api","slug":"/api/useLens","permalink":"/docs/api/useLens","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/api/useLens.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"createComponent","permalink":"/docs/api/createComponent"},"next":{"title":"useOptic","permalink":"/docs/api/useOptic"}},{"id":"api/useOptic","title":"useOptic","description":"The useOptic hook allows you to use reusable logic patterns (optics) within components. Optics encapsulate complex stateful logic that can be shared across multiple components, providing a clean way to compose functionality.","source":"@site/docs/api/useOptic.md","sourceDirName":"api","slug":"/api/useOptic","permalink":"/docs/api/useOptic","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/api/useOptic.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"useLens","permalink":"/docs/api/useLens"},"next":{"title":"createOptic","permalink":"/docs/api/createOptic"}},{"id":"api/useRefraction","title":"useRefraction","description":"The useRefraction hook creates reactive state variables that automatically trigger UI updates when their values change. It's the primary way to manage state in Refract components, providing a simple yet powerful interface for reactive programming.","source":"@site/docs/api/useRefraction.md","sourceDirName":"api","slug":"/api/useRefraction","permalink":"/docs/api/useRefraction","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/api/useRefraction.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"createOptic","permalink":"/docs/api/createOptic"},"next":{"title":"useEffect","permalink":"/docs/api/useEffect"}},{"id":"concepts/components","title":"Components","description":"Components are the building blocks of Refract applications. They are pure functions that describe what the UI should look like based on the current state. Unlike traditional frameworks, Refract components are created using the createComponent() function and receive reactive capabilities through the lens system.","source":"@site/docs/concepts/components.md","sourceDirName":"concepts","slug":"/concepts/components","permalink":"/docs/concepts/components","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/concepts/components.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started","permalink":"/docs/getting-started"},"next":{"title":"Refractions","permalink":"/docs/concepts/refractions"}},{"id":"concepts/effects","title":"Effects","description":"Effects in Refract handle side effects and lifecycle management within components. They provide a clean, declarative way to manage asynchronous operations, subscriptions, timers, and other side effects while ensuring proper cleanup and dependency tracking.","source":"@site/docs/concepts/effects.md","sourceDirName":"concepts","slug":"/concepts/effects","permalink":"/docs/concepts/effects","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/concepts/effects.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Optics","permalink":"/docs/concepts/optics"},"next":{"title":"API Reference Overview","permalink":"/docs/api/overview"}},{"id":"concepts/lenses","title":"Lenses","description":"Lenses are Refract's scoped interface to reactive features within components. They provide a clean, organized way to access refractions, effects, and optics while maintaining proper component boundaries and lifecycle management.","source":"@site/docs/concepts/lenses.md","sourceDirName":"concepts","slug":"/concepts/lenses","permalink":"/docs/concepts/lenses","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/concepts/lenses.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Refractions","permalink":"/docs/concepts/refractions"},"next":{"title":"Optics","permalink":"/docs/concepts/optics"}},{"id":"concepts/optics","title":"Optics","description":"Optics are Refract's composable logic units that encapsulate reusable patterns and behaviors. They're similar to React hooks but designed specifically for Refract's reactive system, providing a clean way to share stateful logic between components while maintaining proper reactivity and lifecycle management.","source":"@site/docs/concepts/optics.md","sourceDirName":"concepts","slug":"/concepts/optics","permalink":"/docs/concepts/optics","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/concepts/optics.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Lenses","permalink":"/docs/concepts/lenses"},"next":{"title":"Effects","permalink":"/docs/concepts/effects"}},{"id":"concepts/refractions","title":"Refractions","description":"Refractions are the core reactive primitives in Refract. They represent units of state that automatically notify the UI when their values change. Think of them as reactive variables that eliminate the need for manual state management and re-rendering logic.","source":"@site/docs/concepts/refractions.md","sourceDirName":"concepts","slug":"/concepts/refractions","permalink":"/docs/concepts/refractions","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/concepts/refractions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Components","permalink":"/docs/concepts/components"},"next":{"title":"Lenses","permalink":"/docs/concepts/lenses"}},{"id":"concepts/state-management","title":"State Management in Refract","description":"Refract provides a flexible and efficient state management system that works seamlessly with React components. This guide covers the core concepts and patterns for managing state in Refract applications.","source":"@site/docs/concepts/state-management.md","sourceDirName":"concepts","slug":"/concepts/state-management","permalink":"/docs/concepts/state-management","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/concepts/state-management.md","tags":[],"version":"current","frontMatter":{"id":"state-management","title":"State Management in Refract"}},{"id":"contributing","title":"Contributing to Refract","description":"Thank you for your interest in contributing to Refract! This guide will help you get started with contributing to the framework and its documentation.","source":"@site/docs/contributing.md","sourceDirName":".","slug":"/contributing","permalink":"/docs/contributing","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/contributing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Animation Basics","permalink":"/docs/tutorials/animation-basics"}},{"id":"developers/api-overview","title":"api-overview","description":"","source":"@site/docs/developers/api-overview.md","sourceDirName":"developers","slug":"/developers/api-overview","permalink":"/docs/developers/api-overview","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/developers/api-overview.md","tags":[],"version":"current","frontMatter":{}},{"id":"developers/authentication","title":"authentication","description":"","source":"@site/docs/developers/authentication.md","sourceDirName":"developers","slug":"/developers/authentication","permalink":"/docs/developers/authentication","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/developers/authentication.md","tags":[],"version":"current","frontMatter":{}},{"id":"developers/endpoints","title":"endpoints","description":"","source":"@site/docs/developers/endpoints.md","sourceDirName":"developers","slug":"/developers/endpoints","permalink":"/docs/developers/endpoints","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/developers/endpoints.md","tags":[],"version":"current","frontMatter":{}},{"id":"developers/integration-guide","title":"integration-guide","description":"","source":"@site/docs/developers/integration-guide.md","sourceDirName":"developers","slug":"/developers/integration-guide","permalink":"/docs/developers/integration-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/developers/integration-guide.md","tags":[],"version":"current","frontMatter":{}},{"id":"developers/webhooks","title":"webhooks","description":"","source":"@site/docs/developers/webhooks.md","sourceDirName":"developers","slug":"/developers/webhooks","permalink":"/docs/developers/webhooks","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/developers/webhooks.md","tags":[],"version":"current","frontMatter":{}},{"id":"faqs/general","title":"general","description":"","source":"@site/docs/faqs/general.md","sourceDirName":"faqs","slug":"/faqs/general","permalink":"/docs/faqs/general","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/faqs/general.md","tags":[],"version":"current","frontMatter":{}},{"id":"faqs/troubleshooting","title":"troubleshooting","description":"","source":"@site/docs/faqs/troubleshooting.md","sourceDirName":"faqs","slug":"/faqs/troubleshooting","permalink":"/docs/faqs/troubleshooting","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/faqs/troubleshooting.md","tags":[],"version":"current","frontMatter":{}},{"id":"features/api-access","title":"api-access","description":"","source":"@site/docs/features/api-access.md","sourceDirName":"features","slug":"/features/api-access","permalink":"/docs/features/api-access","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/features/api-access.md","tags":[],"version":"current","frontMatter":{}},{"id":"features/dashboard","title":"dashboard","description":"","source":"@site/docs/features/dashboard.md","sourceDirName":"features","slug":"/features/dashboard","permalink":"/docs/features/dashboard","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/features/dashboard.md","tags":[],"version":"current","frontMatter":{}},{"id":"features/realtime-feedback","title":"realtime-feedback","description":"","source":"@site/docs/features/realtime-feedback.md","sourceDirName":"features","slug":"/features/realtime-feedback","permalink":"/docs/features/realtime-feedback","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/features/realtime-feedback.md","tags":[],"version":"current","frontMatter":{}},{"id":"getting-started","title":"Getting Started","description":"Learn the fundamentals of Refract and build your first reactive application. This guide assumes you have already installed Refract and are ready to start coding.","source":"@site/docs/getting-started.md","sourceDirName":".","slug":"/getting-started","permalink":"/docs/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/getting-started.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Welcome to Refract","permalink":"/docs/intro"},"next":{"title":"Components","permalink":"/docs/concepts/components"}},{"id":"getting-started/installation","title":"installation","description":"","source":"@site/docs/getting-started/installation.md","sourceDirName":"getting-started","slug":"/getting-started/installation","permalink":"/docs/getting-started/installation","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/getting-started/installation.md","tags":[],"version":"current","frontMatter":{}},{"id":"getting-started/quick-tour","title":"quick-tour","description":"","source":"@site/docs/getting-started/quick-tour.md","sourceDirName":"getting-started","slug":"/getting-started/quick-tour","permalink":"/docs/getting-started/quick-tour","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/getting-started/quick-tour.md","tags":[],"version":"current","frontMatter":{}},{"id":"installation","title":"Installation","description":"Get Refract installed and ready to use in your project. Choose the method that best fits your development workflow.","source":"@site/docs/installation.md","sourceDirName":".","slug":"/installation","permalink":"/docs/installation","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/installation.md","tags":[],"version":"current","frontMatter":{}},{"id":"intro","title":"Welcome to Refract","description":"Refract is a JavaScript framework that makes building web apps easier. It helps you create apps that automatically update when your data changes. Refract uses special tools called refractions, lenses, and optics to help you build apps that are easy to maintain and grow.","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/intro.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","next":{"title":"Getting Started","permalink":"/docs/getting-started"}},{"id":"Introduction/faq","title":"faq","description":"","source":"@site/docs/Introduction/faq.md","sourceDirName":"Introduction","slug":"/Introduction/faq","permalink":"/docs/Introduction/faq","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/Introduction/faq.md","tags":[],"version":"current","frontMatter":{}},{"id":"Introduction/getting-started","title":"getting-started","description":"","source":"@site/docs/Introduction/getting-started.md","sourceDirName":"Introduction","slug":"/Introduction/getting-started","permalink":"/docs/Introduction/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/Introduction/getting-started.md","tags":[],"version":"current","frontMatter":{}},{"id":"Introduction/overview","title":"overview","description":"","source":"@site/docs/Introduction/overview.md","sourceDirName":"Introduction","slug":"/Introduction/overview","permalink":"/docs/Introduction/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/Introduction/overview.md","tags":[],"version":"current","frontMatter":{}},{"id":"tutorials/animation-basics","title":"Animation Basics","description":"Learn how to create smooth, performant animations in Refract using refractions, effects, and CSS transitions.","source":"@site/docs/tutorials/animation-basics.md","sourceDirName":"tutorials","slug":"/tutorials/animation-basics","permalink":"/docs/tutorials/animation-basics","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/tutorials/animation-basics.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Global Theme Management","permalink":"/docs/tutorials/global-theme"},"next":{"title":"Contributing to Refract","permalink":"/docs/contributing"}},{"id":"tutorials/counter-app","title":"Building a Counter App","description":"In this tutorial, you'll build a complete counter application using Refract. This hands-on guide will teach you the fundamentals of Refract development, including state management, effects, and component composition.","source":"@site/docs/tutorials/counter-app.md","sourceDirName":"tutorials","slug":"/tutorials/counter-app","permalink":"/docs/tutorials/counter-app","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/tutorials/counter-app.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"useFlash","permalink":"/docs/api/useFlash"},"next":{"title":"Building a Todo List App","permalink":"/docs/tutorials/todo-list"}},{"id":"tutorials/getting-started","title":"Getting Started","description":"Welcome to Refract! This guide will help you set up your first Refract application and understand its core concepts.","source":"@site/docs/tutorials/getting-started.md","sourceDirName":"tutorials","slug":"/tutorials/getting-started","permalink":"/docs/tutorials/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/tutorials/getting-started.md","tags":[],"version":"current","frontMatter":{"id":"getting-started","title":"Getting Started"}},{"id":"tutorials/global-theme","title":"Global Theme Management","description":"Learn how to implement a global theme system in Refract using refractions and optics for consistent styling across your application.","source":"@site/docs/tutorials/global-theme.md","sourceDirName":"tutorials","slug":"/tutorials/global-theme","permalink":"/docs/tutorials/global-theme","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/tutorials/global-theme.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Building a Todo List App","permalink":"/docs/tutorials/todo-list"},"next":{"title":"Animation Basics","permalink":"/docs/tutorials/animation-basics"}},{"id":"tutorials/todo-list","title":"Building a Todo List App","description":"In this tutorial, you'll create a fully-featured todo list application using Refract. This project will teach you advanced state management, form handling, data persistence, and component composition patterns.","source":"@site/docs/tutorials/todo-list.md","sourceDirName":"tutorials","slug":"/tutorials/todo-list","permalink":"/docs/tutorials/todo-list","draft":false,"unlisted":false,"editUrl":"https://github.com/refract-js/refract/tree/main/docs/docs/tutorials/todo-list.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Building a Counter App","permalink":"/docs/tutorials/counter-app"},"next":{"title":"Global Theme Management","permalink":"/docs/tutorials/global-theme"}}],"drafts":[],"sidebars":{"tutorialSidebar":[{"type":"doc","id":"intro"},{"type":"doc","id":"getting-started"},{"type":"category","label":"Core Concepts","items":[{"type":"doc","id":"concepts/components"},{"type":"doc","id":"concepts/refractions"},{"type":"doc","id":"concepts/lenses"},{"type":"doc","id":"concepts/optics"},{"type":"doc","id":"concepts/effects"}],"collapsed":true,"collapsible":true},{"type":"category","label":"API Reference","items":[{"type":"doc","id":"api/overview"},{"type":"doc","id":"api/createApp"},{"type":"doc","id":"api/createComponent"},{"type":"doc","id":"api/useLens"},{"type":"doc","id":"api/useOptic"},{"type":"doc","id":"api/createOptic"},{"type":"doc","id":"api/useRefraction"},{"type":"doc","id":"api/useEffect"},{"type":"doc","id":"api/useFlash"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Tutorials","items":[{"type":"doc","id":"tutorials/counter-app"},{"type":"doc","id":"tutorials/todo-list"},{"type":"doc","id":"tutorials/global-theme"},{"type":"doc","id":"tutorials/animation-basics"}],"collapsed":true,"collapsible":true},{"type":"doc","id":"contributing"}]}}]}},"docusaurus-plugin-content-blog":{"default":{"blogSidebarTitle":"Recent Posts","blogPosts":[{"id":"performance-optimization-guide","metadata":{"permalink":"/blog/performance-optimization-guide","editUrl":"https://github.com/refract-js/refract/tree/main/docs/blog/2024-02-28-performance-optimization-guide.md","source":"@site/blog/2024-02-28-performance-optimization-guide.md","title":"Mastering Performance in Refract - Advanced Optimization Techniques","description":"Performance is at the heart of great user experiences. While Refract provides excellent performance out of the box through its reactive architecture, understanding advanced optimization techniques can help you build lightning-fast applications that scale beautifully.","date":"2024-02-28T00:00:00.000Z","tags":[{"inline":true,"label":"performance","permalink":"/blog/tags/performance"},{"inline":true,"label":"optimization","permalink":"/blog/tags/optimization"},{"inline":true,"label":"best-practices","permalink":"/blog/tags/best-practices"},{"inline":true,"label":"advanced","permalink":"/blog/tags/advanced"}],"readingTime":5.69,"hasTruncateMarker":true,"authors":[{"name":"Refract Team","title":"Core Development Team","url":"https://github.com/refract-js","image_url":"/img/logo.svg","imageURL":"/img/logo.svg","socials":{},"key":null,"page":null}],"frontMatter":{"slug":"performance-optimization-guide","title":"Mastering Performance in Refract - Advanced Optimization Techniques","authors":[{"name":"Refract Team","title":"Core Development Team","url":"https://github.com/refract-js","image_url":"/img/logo.svg","imageURL":"/img/logo.svg"}],"tags":["performance","optimization","best-practices","advanced"]},"unlisted":false,"nextItem":{"title":"Introducing Refract - A New Era of Reactive UI Development","permalink":"/blog/introducing-refract"}},"content":"Performance is at the heart of great user experiences. While Refract provides excellent performance out of the box through its reactive architecture, understanding advanced optimization techniques can help you build lightning-fast applications that scale beautifully.\n\n<!--truncate-->\n\n## Understanding Refract's Performance Model\n\nRefract's performance advantages come from several key architectural decisions:\n\n- **Fine-grained reactivity**: Only components that depend on changed state re-render\n- **Automatic batching**: Multiple state updates are batched into single render cycles\n- **Intelligent memoization**: Derived values are cached and recomputed only when necessary\n- **Minimal overhead**: Lightweight reactive primitives with minimal runtime cost\n\n## Performance Measurement and Profiling\n\nBefore optimizing, you need to measure. Here's how to profile your Refract applications:\n\n### Built-in Performance Monitoring\n\n```javascript\nimport { createApp, enablePerformanceMonitoring } from 'refract-js';\n\n// Enable performance monitoring in development\nif (process.env.NODE_ENV === 'development') {\n  enablePerformanceMonitoring({\n    logRefractionUpdates: true,\n    logRenderTimes: true,\n    trackMemoryUsage: true,\n  });\n}\n\nconst app = createApp();\n```\n\n### Custom Performance Hooks\n\n```javascript\nconst usePerformanceTracker = createOptic((lens, componentName) => {\n  const renderCount = lens.useRefraction(0);\n  const lastRenderTime = lens.useRefraction(0);\n\n  lens.useEffect(() => {\n    const start = performance.now();\n    renderCount.set(prev => prev + 1);\n    \n    return () => {\n      const end = performance.now();\n      lastRenderTime.set(end - start);\n      \n      if (process.env.NODE_ENV === 'development') {\n        console.log(`${componentName} render #${renderCount.value}: ${end - start}ms`);\n      }\n    };\n  });\n\n  return {\n    renderCount: renderCount.value,\n    lastRenderTime: lastRenderTime.value,\n  };\n});\n```\n\n## Optimizing Refractions\n\n### 1. Minimize Refraction Granularity\n\nInstead of storing complex objects in single refractions, break them down:\n\n```javascript\n// ❌ Less optimal - entire object updates trigger all dependents\nconst user = lens.useRefraction({\n  profile: { name: 'John', email: 'john@example.com' },\n  preferences: { theme: 'dark', notifications: true },\n  stats: { loginCount: 42, lastLogin: new Date() }\n});\n\n// ✅ Better - granular updates\nconst userProfile = lens.useRefraction({ name: 'John', email: 'john@example.com' });\nconst userPreferences = lens.useRefraction({ theme: 'dark', notifications: true });\nconst userStats = lens.useRefraction({ loginCount: 42, lastLogin: new Date() });\n```\n\n### 2. Use Derived Values Strategically\n\nDerived values are cached and only recalculated when dependencies change:\n\n```javascript\nconst TodoList = createComponent(({ lens, todos }) => {\n  // ✅ Cached computation - only recalculates when todos change\n  const todoStats = lens.useDerived(() => ({\n    total: todos.value.length,\n    completed: todos.value.filter(t => t.completed).length,\n    active: todos.value.filter(t => !t.completed).length,\n  }), [todos.value]);\n\n  // ✅ Expensive filtering is cached\n  const filteredTodos = lens.useDerived(() => {\n    return todos.value\n      .filter(todo => todo.text.toLowerCase().includes(searchTerm.value.toLowerCase()))\n      .sort((a, b) => a.priority - b.priority);\n  }, [todos.value, searchTerm.value]);\n\n  return (\n    <div>\n      <TodoStats stats={todoStats.value} />\n      <TodoItems items={filteredTodos.value} />\n    </div>\n  );\n});\n```\n\n### 3. Batch State Updates\n\nWhen making multiple related updates, batch them to prevent intermediate renders:\n\n```javascript\nconst useOptimizedTodoActions = createOptic((lens, todos) => {\n  const batchUpdateTodos = (updates) => {\n    // Use a single state update for multiple changes\n    todos.set(prevTodos => {\n      let newTodos = [...prevTodos];\n      \n      updates.forEach(update => {\n        switch (update.type) {\n          case 'toggle':\n            newTodos = newTodos.map(todo =>\n              todo.id === update.id ? { ...todo, completed: !todo.completed } : todo\n            );\n            break;\n          case 'delete':\n            newTodos = newTodos.filter(todo => todo.id !== update.id);\n            break;\n          case 'add':\n            newTodos.push(update.todo);\n            break;\n        }\n      });\n      \n      return newTodos;\n    });\n  };\n\n  const completeAll = () => {\n    todos.set(prevTodos => \n      prevTodos.map(todo => ({ ...todo, completed: true }))\n    );\n  };\n\n  return { batchUpdateTodos, completeAll };\n});\n```\n\n## Component-Level Optimizations\n\n### 1. Minimize Component Re-renders\n\nUse component memoization for expensive renders:\n\n```javascript\nconst ExpensiveChart = createComponent(({ lens, data, config }) => {\n  // Only re-render when data or config actually changes\n  const memoizedChart = lens.useDerived(() => {\n    return generateChartData(data.value, config.value);\n  }, [data.value, config.value]);\n\n  // Expensive DOM operations only when necessary\n  lens.useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    renderChart(ctx, memoizedChart.value);\n  }, [memoizedChart.value]);\n\n  return <canvas ref={canvasRef} />;\n});\n```\n\n### 2. Optimize List Rendering\n\nFor large lists, implement virtualization and efficient key strategies:\n\n```javascript\nconst VirtualizedList = createComponent(({ lens, items, itemHeight = 50 }) => {\n  const scrollTop = lens.useRefraction(0);\n  const containerHeight = lens.useRefraction(400);\n\n  const visibleItems = lens.useDerived(() => {\n    const startIndex = Math.floor(scrollTop.value / itemHeight);\n    const endIndex = Math.min(\n      startIndex + Math.ceil(containerHeight.value / itemHeight) + 1,\n      items.value.length\n    );\n    \n    return items.value.slice(startIndex, endIndex).map((item, index) => ({\n      ...item,\n      index: startIndex + index,\n    }));\n  }, [scrollTop.value, containerHeight.value, items.value]);\n\n  const totalHeight = items.value.length * itemHeight;\n  const offsetY = Math.floor(scrollTop.value / itemHeight) * itemHeight;\n\n  return (\n    <div \n      style={{ height: containerHeight.value, overflow: 'auto' }}\n      onScroll={(e) => scrollTop.set(e.target.scrollTop)}\n    >\n      <div style={{ height: totalHeight, position: 'relative' }}>\n        <div style={{ transform: `translateY(${offsetY}px)` }}>\n          {visibleItems.value.map(item => (\n            <ListItem \n              key={item.id} \n              item={item} \n              style={{ height: itemHeight }}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n});\n```\n\n### 3. Lazy Loading and Code Splitting\n\nImplement lazy loading for better initial load performance:\n\n```javascript\nconst LazyRoute = createComponent(({ lens, path, component: Component }) => {\n  const isLoaded = lens.useRefraction(false);\n  const loadedComponent = lens.useRefraction(null);\n\n  lens.useEffect(() => {\n    if (path === currentPath.value && !isLoaded.value) {\n      Component().then(module => {\n        loadedComponent.set(module.default);\n        isLoaded.set(true);\n      });\n    }\n  }, [path, currentPath.value]);\n\n  if (!isLoaded.value) {\n    return <LoadingSpinner />;\n  }\n\n  const LoadedComponent = loadedComponent.value;\n  return LoadedComponent ? <LoadedComponent lens={lens} /> : null;\n});\n\n// Usage\nconst routes = [\n  { path: '/dashboard', component: () => import('./Dashboard') },\n  { path: '/profile', component: () => import('./Profile') },\n  { path: '/settings', component: () => import('./Settings') },\n];\n```\n\n## Memory Management\n\n### 1. Cleanup Effects Properly\n\nAlways clean up subscriptions and timers:\n\n```javascript\nconst useWebSocketConnection = createOptic((lens, url) => {\n  const connection = lens.useRefraction(null);\n  const messages = lens.useRefraction([]);\n\n  lens.useEffect(() => {\n    const ws = new WebSocket(url);\n    \n    ws.onmessage = (event) => {\n      messages.set(prev => [...prev, JSON.parse(event.data)]);\n    };\n    \n    connection.set(ws);\n    \n    // Cleanup function\n    return () => {\n      ws.close();\n      connection.set(null);\n    };\n  }, [url]);\n\n  return {\n    connection: connection.value,\n    messages: messages.value,\n  };\n});\n```\n\n### 2. Avoid Memory Leaks in Derived Values\n\nBe careful with closures in derived values:\n\n```javascript\n// ❌ Potential memory leak - captures entire component scope\nconst expensiveComputation = lens.useDerived(() => {\n  return heavyProcessing(someData, anotherData, yetAnotherData);\n}, [someData.value]);\n\n// ✅ Better - only capture what's needed\nconst expensiveComputation = lens.useDerived(() => {\n  const data = someData.value;\n  return heavyProcessing(data);\n}, [someData.value]);\n```\n\n## Advanced Patterns\n\n### 1. Selective Updates with Lenses\n\nUse lenses to update specific parts of complex state:\n\n```javascript\nconst useSelectiveUpdates = createOptic((lens, initialState) => {\n  const state = lens.useRefraction(initialState);\n\n  const updatePath = (path, value) => {\n    state.set(prevState => {\n      const newState = { ...prevState };\n      let current = newState;\n      \n      for (let i = 0; i < path.length - 1; i++) {\n        current[path[i]] = { ...current[path[i]] };\n        current = current[path[i]];\n      }\n      \n      current[path[path.length - 1]] = value;\n      return newState;\n    });\n  };\n\n  return {\n    state: state.value,\n    updatePath,\n  };\n});\n```\n\n### 2. Debounced Updates\n\nImplement debouncing for expensive operations:\n\n```javascript\nconst useDebouncedSearch = createOptic((lens, delay = 300) => {\n  const query = lens.useRefraction('');\n  const debouncedQuery = lens.useRefraction('');\n  const isSearching = lens.useRefraction(false);\n\n  lens.useEffect(() => {\n    const timer = setTimeout(() => {\n      debouncedQuery.set(query.value);\n      isSearching.set(false);\n    }, delay);\n\n    isSearching.set(true);\n\n    return () => clearTimeout(timer);\n  }, [query.value, delay]);\n\n  return {\n    query: query.value,\n    debouncedQuery: debouncedQuery.value,\n    isSearching: isSearching.value,\n    setQuery: query.set,\n  };\n});\n```\n\n## Performance Monitoring in Production\n\n### 1. Custom Metrics Collection\n\n```javascript\nconst usePerformanceMetrics = createOptic((lens) => {\n  const metrics = lens.useRefraction({\n    renderCount: 0,\n    averageRenderTime: 0,\n    memoryUsage: 0,\n  });\n\n  const recordRender = (renderTime) => {\n    metrics.set(prev => ({\n      renderCount: prev.renderCount + 1,\n      averageRenderTime: (prev.averageRenderTime * prev.renderCount + renderTime) / (prev.renderCount + 1),\n      memoryUsage: performance.memory?.usedJSHeapSize || 0,\n    }));\n  };\n\n  // Send metrics to analytics service\n  lens.useEffect(() => {\n    const interval = setInterval(() => {\n      if (metrics.value.renderCount > 0) {\n        analytics.track('performance_metrics', metrics.value);\n      }\n    }, 60000); // Every minute\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return { metrics: metrics.value, recordRender };\n});\n```\n\n### 2. Performance Budgets\n\nSet up performance budgets and alerts:\n\n```javascript\nconst PERFORMANCE_BUDGETS = {\n  maxRenderTime: 16, // 60fps\n  maxMemoryUsage: 50 * 1024 * 1024, // 50MB\n  maxRefractionUpdates: 100, // per second\n};\n\nconst usePerformanceBudget = createOptic((lens) => {\n  const violations = lens.useRefraction([]);\n\n  const checkBudget = (metric, value) => {\n    const budget = PERFORMANCE_BUDGETS[metric];\n    if (budget && value > budget) {\n      violations.set(prev => [...prev, {\n        metric,\n        value,\n        budget,\n        timestamp: Date.now(),\n      }]);\n\n      // Alert in development\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(`Performance budget exceeded: ${metric} (${value} > ${budget})`);\n      }\n    }\n  };\n\n  return { violations: violations.value, checkBudget };\n});\n```\n\n## Best Practices Summary\n\n1. **Measure First**: Always profile before optimizing\n2. **Granular State**: Break down complex state into smaller refractions\n3. **Cache Expensive Operations**: Use derived values for computations\n4. **Batch Updates**: Group related state changes\n5. **Clean Up**: Always clean up effects and subscriptions\n6. **Virtualize Large Lists**: Implement virtualization for performance\n7. **Lazy Load**: Split code and load components on demand\n8. **Monitor Production**: Track performance metrics in production\n\n## Conclusion\n\nRefract's reactive architecture provides excellent performance out of the box, but understanding these advanced optimization techniques will help you build applications that scale to millions of users while maintaining smooth, responsive user experiences.\n\nRemember: premature optimization is the root of all evil. Focus on building great features first, then optimize based on real performance data and user feedback.\n\n---\n\n*Happy optimizing!*  \n*The Refract Team*"},{"id":"introducing-refract","metadata":{"permalink":"/blog/introducing-refract","editUrl":"https://github.com/refract-js/refract/tree/main/docs/blog/2024-01-15-introducing-refract.md","source":"@site/blog/2024-01-15-introducing-refract.md","title":"Introducing Refract - A New Era of Reactive UI Development","description":"Today, we're excited to announce Refract, a revolutionary JavaScript framework that brings reactive programming to the forefront of UI development. Inspired by the physics of light refraction, Refract bends traditional paradigms to create more intuitive, performant, and maintainable applications.","date":"2024-01-15T00:00:00.000Z","tags":[{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"},{"inline":true,"label":"reactive","permalink":"/blog/tags/reactive"},{"inline":true,"label":"javascript","permalink":"/blog/tags/javascript"},{"inline":true,"label":"ui","permalink":"/blog/tags/ui"}],"readingTime":3.31,"hasTruncateMarker":true,"authors":[{"name":"Refract Team","title":"Core Development Team","url":"https://github.com/refract-js","image_url":"/img/logo.svg","imageURL":"/img/logo.svg","socials":{},"key":null,"page":null}],"frontMatter":{"slug":"introducing-refract","title":"Introducing Refract - A New Era of Reactive UI Development","authors":[{"name":"Refract Team","title":"Core Development Team","url":"https://github.com/refract-js","image_url":"/img/logo.svg","imageURL":"/img/logo.svg"}],"tags":["announcement","reactive","javascript","ui"]},"unlisted":false,"prevItem":{"title":"Mastering Performance in Refract - Advanced Optimization Techniques","permalink":"/blog/performance-optimization-guide"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"Today, we're excited to announce **Refract**, a revolutionary JavaScript framework that brings reactive programming to the forefront of UI development. Inspired by the physics of light refraction, Refract bends traditional paradigms to create more intuitive, performant, and maintainable applications.\n\n<!--truncate-->\n\n## The Problem with Current Frameworks\n\nModern web development has made tremendous strides, but we still face fundamental challenges:\n\n- **Complex State Management**: Managing application state across components remains difficult\n- **Performance Bottlenecks**: Unnecessary re-renders and inefficient updates slow down applications\n- **Developer Experience**: Steep learning curves and verbose APIs hinder productivity\n- **Composition Challenges**: Reusing logic across components often leads to complex patterns\n\n## Enter Refract: Bending Light, Bending Reality\n\nRefract addresses these challenges through a unique approach to reactive programming. Just as light bends when passing through different mediums, Refract allows your application state to flow and transform naturally through your component tree.\n\n### Core Innovations\n\n#### 1. Refractions - Reactive State Containers\n\n```javascript\nimport { createComponent } from 'refract-js';\n\nconst Counter = createComponent(({ lens }) => {\n  const count = lens.useRefraction(0);\n  \n  return (\n    <div>\n      <h1>Count: {count.value}</h1>\n      <button onClick={() => count.set(count.value + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n});\n```\n\nRefractions provide automatic dependency tracking and fine-grained updates, ensuring your UI stays in sync with minimal overhead.\n\n#### 2. Lenses - Scoped Framework Access\n\nLenses provide scoped access to framework features, ensuring clean component boundaries and predictable behavior:\n\n```javascript\nconst MyComponent = createComponent(({ lens, initialData }) => {\n  const data = lens.useRefraction(initialData);\n  const derived = lens.useDerived(() => data.value.length, [data.value]);\n  \n  lens.useEffect(() => {\n    console.log('Data changed:', data.value);\n  }, [data.value]);\n  \n  return <div>Items: {derived.value}</div>;\n});\n```\n\n#### 3. Optics - Reusable Logic Units\n\nOptics encapsulate stateful behavior that can be shared across components:\n\n```javascript\nconst useCounter = lens.useOptic((initialValue = 0) => {\n  const count = lens.useRefraction(initialValue);\n  const increment = () => count.set(prev => prev + 1);\n  const decrement = () => count.set(prev => prev - 1);\n  const reset = () => count.set(initialValue);\n  \n  return { count: count.value, increment, decrement, reset };\n});\n```\n\n## Performance That Scales\n\nRefract's reactive system ensures optimal performance through:\n\n- **Automatic Dependency Tracking**: Only components that depend on changed state re-render\n- **Batched Updates**: Multiple state changes are batched into single render cycles\n- **Intelligent Memoization**: Derived values are cached and only recalculated when dependencies change\n- **Minimal Bundle Size**: Tree-shakeable architecture keeps your bundles lean\n\n## Developer Experience First\n\nWe've designed Refract with developer productivity in mind:\n\n- **Intuitive APIs**: Natural, readable code that expresses intent clearly\n- **Excellent TypeScript Support**: Full type safety with intelligent inference\n- **Comprehensive DevTools**: Debug reactive flows with visual state inspection\n- **Rich Ecosystem**: Growing collection of utilities, patterns, and integrations\n\n## Real-World Example: Todo Application\n\nHere's how a complete todo application looks in Refract:\n\n```javascript\nconst TodoApp = createComponent(({ lens }) => {\n  const todos = lens.useRefraction([]);\n  const filter = lens.useRefraction('all');\n  const newTodo = lens.useRefraction('');\n\n  const addTodo = () => {\n    if (newTodo.value.trim()) {\n      todos.set(prev => [...prev, {\n        id: Date.now(),\n        text: newTodo.value,\n        completed: false\n      }]);\n      newTodo.set('');\n    }\n  };\n\n  const toggleTodo = (id) => {\n    todos.set(prev => prev.map(todo =>\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n\n  const filteredTodos = lens.useDerived(() => {\n    return todos.value.filter(todo => {\n      if (filter.value === 'active') return !todo.completed;\n      if (filter.value === 'completed') return todo.completed;\n      return true;\n    });\n  }, [todos.value, filter.value]);\n\n  return (\n    <div className=\"todo-app\">\n      <header>\n        <h1>Todos</h1>\n        <input\n          value={newTodo.value}\n          onChange={(e) => newTodo.set(e.target.value)}\n          onKeyPress={(e) => e.key === 'Enter' && addTodo()}\n          placeholder=\"What needs to be done?\"\n        />\n      </header>\n      \n      <main>\n        <TodoList todos={filteredTodos.value} onToggle={toggleTodo} />\n        <TodoFilters filter={filter} />\n      </main>\n    </div>\n  );\n});\n```\n\n## What's Next?\n\nThis is just the beginning. We're working on:\n\n- **Server-Side Rendering**: Full SSR support with hydration\n- **React Integration**: Gradual migration path from React applications  \n- **Mobile Development**: React Native integration for cross-platform apps\n- **Advanced DevTools**: Time-travel debugging and performance profiling\n- **Ecosystem Growth**: UI libraries, routing solutions, and state management patterns\n\n## Get Started Today\n\nReady to experience the future of reactive UI development?\n\n```bash\n# Create a new Refract app\nnpx create-refract-app my-app\ncd my-app\nnpm start\n\n# Or add to existing project\nnpm install refract-js\n```\n\nVisit our [documentation](https://refract-docs.netlify.app) for comprehensive guides, tutorials, and API references.\n\n## Join the Community\n\n- 🌟 [Star us on GitHub](https://github.com/refract-js/refract)\n- 💬 [Join our Discord](https://discord.gg/refract)\n- 🐦 [Follow us on Twitter](https://twitter.com/RefractJS)\n- 📧 [Subscribe to our newsletter](https://refract-js.org/newsletter)\n\nThe future of UI development is reactive, composable, and performant. Welcome to Refract - where light bends, and possibilities are infinite.\n\n---\n\n*The Refract Team*"},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/refract-js/refract/tree/main/docs/blog/2021-08-26-welcome/index.md","source":"@site/blog/2021-08-26-welcome/index.md","title":"Welcome","description":"Docusaurus blogging features are powered by the blog plugin.","date":"2021-08-26T00:00:00.000Z","tags":[{"inline":false,"label":"Facebook","permalink":"/blog/tags/facebook","description":"Facebook tag description"},{"inline":false,"label":"Hello","permalink":"/blog/tags/hello","description":"Hello tag description"},{"inline":false,"label":"Docusaurus","permalink":"/blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":0.56,"hasTruncateMarker":true,"authors":[{"name":"Sébastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","page":{"permalink":"/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/","github":"https://github.com/slorber","newsletter":"https://thisweekinreact.com"},"imageURL":"https://github.com/slorber.png","key":"slorber"},{"name":"Yangshun Tay","title":"Ex-Meta Staff Engineer, Co-founder GreatFrontEnd","url":"https://linkedin.com/in/yangshun","page":{"permalink":"/blog/authors/yangshun"},"socials":{"x":"https://x.com/yangshunz","linkedin":"https://www.linkedin.com/in/yangshun/","github":"https://github.com/yangshun","newsletter":"https://www.greatfrontend.com"},"imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["slorber","yangshun"],"tags":["facebook","hello","docusaurus"]},"unlisted":false,"prevItem":{"title":"Introducing Refract - A New Era of Reactive UI Development","permalink":"/blog/introducing-refract"},"nextItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"}},"content":"[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\n\nHere are a few tips you might find useful.\n\n<!-- truncate -->\n\nSimply add Markdown files (or folders) to the `blog` directory.\n\nRegular blog authors can be added to `authors.yml`.\n\nThe blog post date can be extracted from filenames, such as:\n\n- `2019-05-30-welcome.md`\n- `2019-05-30-welcome/index.md`\n\nA blog post folder can be convenient to co-locate blog post images:\n\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\n\nThe blog supports tags as well!\n\n**And if you don't want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."},{"id":"mdx-blog-post","metadata":{"permalink":"/blog/mdx-blog-post","editUrl":"https://github.com/refract-js/refract/tree/main/docs/blog/2021-08-01-mdx-blog-post.mdx","source":"@site/blog/2021-08-01-mdx-blog-post.mdx","title":"MDX Blog Post","description":"Blog posts support Docusaurus Markdown features, such as MDX.","date":"2021-08-01T00:00:00.000Z","tags":[{"inline":false,"label":"Docusaurus","permalink":"/blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":0.27,"hasTruncateMarker":true,"authors":[{"name":"Sébastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","page":{"permalink":"/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/","github":"https://github.com/slorber","newsletter":"https://thisweekinreact.com"},"imageURL":"https://github.com/slorber.png","key":"slorber"}],"frontMatter":{"slug":"mdx-blog-post","title":"MDX Blog Post","authors":["slorber"],"tags":["docusaurus"]},"unlisted":false,"prevItem":{"title":"Welcome","permalink":"/blog/welcome"},"nextItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\n\n:::tip\n\nUse the power of React to create interactive blog posts.\n\n:::\n\n{/* truncate */}\n\nFor example, use JSX to create an interactive button:\n\n```js\n<button onClick={() => alert('button clicked!')}>Click me!</button>\n```\n\n<button onClick={() => alert('button clicked!')}>Click me!</button>"},{"id":"long-blog-post","metadata":{"permalink":"/blog/long-blog-post","editUrl":"https://github.com/refract-js/refract/tree/main/docs/blog/2019-05-29-long-blog-post.md","source":"@site/blog/2019-05-29-long-blog-post.md","title":"Long Blog Post","description":"This is the summary of a very long blog post,","date":"2019-05-29T00:00:00.000Z","tags":[{"inline":false,"label":"Hello","permalink":"/blog/tags/hello","description":"Hello tag description"},{"inline":false,"label":"Docusaurus","permalink":"/blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":2.04,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","title":"Ex-Meta Staff Engineer, Co-founder GreatFrontEnd","url":"https://linkedin.com/in/yangshun","page":{"permalink":"/blog/authors/yangshun"},"socials":{"x":"https://x.com/yangshunz","linkedin":"https://www.linkedin.com/in/yangshun/","github":"https://github.com/yangshun","newsletter":"https://www.greatfrontend.com"},"imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"long-blog-post","title":"Long Blog Post","authors":"yangshun","tags":["hello","docusaurus"]},"unlisted":false,"prevItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"},"nextItem":{"title":"First Blog Post","permalink":"/blog/first-blog-post"}},"content":"This is the summary of a very long blog post,\n\nUse a `<!--` `truncate` `-->` comment to limit blog post size in the list view.\n\n<!-- truncate -->\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"},{"id":"first-blog-post","metadata":{"permalink":"/blog/first-blog-post","editUrl":"https://github.com/refract-js/refract/tree/main/docs/blog/2019-05-28-first-blog-post.md","source":"@site/blog/2019-05-28-first-blog-post.md","title":"First Blog Post","description":"Lorem ipsum dolor sit amet...","date":"2019-05-28T00:00:00.000Z","tags":[{"inline":false,"label":"Hola","permalink":"/blog/tags/hola","description":"Hola tag description"},{"inline":false,"label":"Docusaurus","permalink":"/blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":0.13,"hasTruncateMarker":true,"authors":[{"name":"Sébastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","page":{"permalink":"/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/","github":"https://github.com/slorber","newsletter":"https://thisweekinreact.com"},"imageURL":"https://github.com/slorber.png","key":"slorber"},{"name":"Yangshun Tay","title":"Ex-Meta Staff Engineer, Co-founder GreatFrontEnd","url":"https://linkedin.com/in/yangshun","page":{"permalink":"/blog/authors/yangshun"},"socials":{"x":"https://x.com/yangshunz","linkedin":"https://www.linkedin.com/in/yangshun/","github":"https://github.com/yangshun","newsletter":"https://www.greatfrontend.com"},"imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"first-blog-post","title":"First Blog Post","authors":["slorber","yangshun"],"tags":["hola","docusaurus"]},"unlisted":false,"prevItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Lorem ipsum dolor sit amet...\n\n<!-- truncate -->\n\n...consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"}],"blogListPaginated":[{"items":["performance-optimization-guide","introducing-refract","welcome","mdx-blog-post","long-blog-post","first-blog-post"],"metadata":{"permalink":"/blog","page":1,"postsPerPage":10,"totalPages":1,"totalCount":6,"blogDescription":"Updates, news and announcements about the Refract framework","blogTitle":"Refract Blog"}}],"blogTags":{"/blog/tags/performance":{"inline":true,"label":"performance","permalink":"/blog/tags/performance","items":["performance-optimization-guide"],"pages":[{"items":["performance-optimization-guide"],"metadata":{"permalink":"/blog/tags/performance","page":1,"postsPerPage":10,"totalPages":1,"totalCount":1,"blogDescription":"Updates, news and announcements about the Refract framework","blogTitle":"Refract Blog"}}],"unlisted":false},"/blog/tags/optimization":{"inline":true,"label":"optimization","permalink":"/blog/tags/optimization","items":["performance-optimization-guide"],"pages":[{"items":["performance-optimization-guide"],"metadata":{"permalink":"/blog/tags/optimization","page":1,"postsPerPage":10,"totalPages":1,"totalCount":1,"blogDescription":"Updates, news and announcements about the Refract framework","blogTitle":"Refract Blog"}}],"unlisted":false},"/blog/tags/best-practices":{"inline":true,"label":"best-practices","permalink":"/blog/tags/best-practices","items":["performance-optimization-guide"],"pages":[{"items":["performance-optimization-guide"],"metadata":{"permalink":"/blog/tags/best-practices","page":1,"postsPerPage":10,"totalPages":1,"totalCount":1,"blogDescription":"Updates, news and announcements about the Refract framework","blogTitle":"Refract Blog"}}],"unlisted":false},"/blog/tags/advanced":{"inline":true,"label":"advanced","permalink":"/blog/tags/advanced","items":["performance-optimization-guide"],"pages":[{"items":["performance-optimization-guide"],"metadata":{"permalink":"/blog/tags/advanced","page":1,"postsPerPage":10,"totalPages":1,"totalCount":1,"blogDescription":"Updates, news and announcements about the Refract framework","blogTitle":"Refract Blog"}}],"unlisted":false},"/blog/tags/announcement":{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement","items":["introducing-refract"],"pages":[{"items":["introducing-refract"],"metadata":{"permalink":"/blog/tags/announcement","page":1,"postsPerPage":10,"totalPages":1,"totalCount":1,"blogDescription":"Updates, news and announcements about the Refract framework","blogTitle":"Refract Blog"}}],"unlisted":false},"/blog/tags/reactive":{"inline":true,"label":"reactive","permalink":"/blog/tags/reactive","items":["introducing-refract"],"pages":[{"items":["introducing-refract"],"metadata":{"permalink":"/blog/tags/reactive","page":1,"postsPerPage":10,"totalPages":1,"totalCount":1,"blogDescription":"Updates, news and announcements about the Refract framework","blogTitle":"Refract Blog"}}],"unlisted":false},"/blog/tags/javascript":{"inline":true,"label":"javascript","permalink":"/blog/tags/javascript","items":["introducing-refract"],"pages":[{"items":["introducing-refract"],"metadata":{"permalink":"/blog/tags/javascript","page":1,"postsPerPage":10,"totalPages":1,"totalCount":1,"blogDescription":"Updates, news and announcements about the Refract framework","blogTitle":"Refract Blog"}}],"unlisted":false},"/blog/tags/ui":{"inline":true,"label":"ui","permalink":"/blog/tags/ui","items":["introducing-refract"],"pages":[{"items":["introducing-refract"],"metadata":{"permalink":"/blog/tags/ui","page":1,"postsPerPage":10,"totalPages":1,"totalCount":1,"blogDescription":"Updates, news and announcements about the Refract framework","blogTitle":"Refract Blog"}}],"unlisted":false},"/blog/tags/facebook":{"inline":false,"label":"Facebook","permalink":"/blog/tags/facebook","description":"Facebook tag description","items":["welcome"],"pages":[{"items":["welcome"],"metadata":{"permalink":"/blog/tags/facebook","page":1,"postsPerPage":10,"totalPages":1,"totalCount":1,"blogDescription":"Updates, news and announcements about the Refract framework","blogTitle":"Refract Blog"}}],"unlisted":false},"/blog/tags/hello":{"inline":false,"label":"Hello","permalink":"/blog/tags/hello","description":"Hello tag description","items":["welcome","long-blog-post"],"pages":[{"items":["welcome","long-blog-post"],"metadata":{"permalink":"/blog/tags/hello","page":1,"postsPerPage":10,"totalPages":1,"totalCount":2,"blogDescription":"Updates, news and announcements about the Refract framework","blogTitle":"Refract Blog"}}],"unlisted":false},"/blog/tags/docusaurus":{"inline":false,"label":"Docusaurus","permalink":"/blog/tags/docusaurus","description":"Docusaurus tag description","items":["welcome","mdx-blog-post","long-blog-post","first-blog-post"],"pages":[{"items":["welcome","mdx-blog-post","long-blog-post","first-blog-post"],"metadata":{"permalink":"/blog/tags/docusaurus","page":1,"postsPerPage":10,"totalPages":1,"totalCount":4,"blogDescription":"Updates, news and announcements about the Refract framework","blogTitle":"Refract Blog"}}],"unlisted":false},"/blog/tags/hola":{"inline":false,"label":"Hola","permalink":"/blog/tags/hola","description":"Hola tag description","items":["first-blog-post"],"pages":[{"items":["first-blog-post"],"metadata":{"permalink":"/blog/tags/hola","page":1,"postsPerPage":10,"totalPages":1,"totalCount":1,"blogDescription":"Updates, news and announcements about the Refract framework","blogTitle":"Refract Blog"}}],"unlisted":false}},"blogTagsListPath":"/blog/tags","authorsMap":{"yangshun":{"name":"Yangshun Tay","title":"Ex-Meta Staff Engineer, Co-founder GreatFrontEnd","url":"https://linkedin.com/in/yangshun","page":{"permalink":"/blog/authors/yangshun"},"socials":{"x":"https://x.com/yangshunz","linkedin":"https://www.linkedin.com/in/yangshun/","github":"https://github.com/yangshun","newsletter":"https://www.greatfrontend.com"},"imageURL":"https://github.com/yangshun.png","key":"yangshun"},"slorber":{"name":"Sébastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","page":{"permalink":"/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/","github":"https://github.com/slorber","newsletter":"https://thisweekinreact.com"},"imageURL":"https://github.com/slorber.png","key":"slorber"}}}},"docusaurus-plugin-content-pages":{"default":[{"type":"jsx","permalink":"/","source":"@site/src/pages/index.js"},{"type":"mdx","permalink":"/markdown-page","source":"@site/src/pages/markdown-page.md","title":"Markdown page example","description":"You don't need React to write simple standalone pages.","frontMatter":{"title":"Markdown page example"},"unlisted":false}]},"docusaurus-plugin-debug":{},"docusaurus-plugin-svgr":{},"docusaurus-theme-classic":{},"@easyops-cn/docusaurus-search-local":{},"docusaurus-bootstrap-plugin":{},"docusaurus-mdx-fallback-plugin":{}}}